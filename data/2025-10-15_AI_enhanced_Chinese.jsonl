{"id": "2510.12277", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.12277", "abs": "https://arxiv.org/abs/2510.12277", "authors": ["Thomas Benz", "Axel Vanoni", "Michael Rogenmoser", "Luca Benini"], "title": "A Direct Memory Access Controller (DMAC) for Irregular Data Transfers on RISC-V Linux Systems", "comment": "6 pages, 5 figures", "summary": "With the ever-growing heterogeneity in computing systems, driven by modern\nmachine learning applications, pressure is increasing on memory systems to\nhandle arbitrary and more demanding transfers efficiently. Descriptor-based\ndirect memory access controllers (DMACs) allow such transfers to be executed by\ndecoupling memory transfers from processing units. Classical descriptor-based\nDMACs are inefficient when handling arbitrary transfers of small unit sizes.\nExcessive descriptor size and the serialized nature of processing descriptors\nemployed by the DMAC lead to large static overheads when setting up transfers.\nTo tackle this inefficiency, we propose a descriptor-based DMAC optimized to\nefficiently handle arbitrary transfers of small unit sizes. We implement a\nlightweight descriptor format in an AXI4-based DMAC. We further increase\nperformance by implementing a low-overhead speculative descriptor prefetching\nscheme without additional latency penalties in the case of a misprediction. Our\nDMAC is integrated into a 64-bit Linux-capable RISC-V SoC and emulated on a\nKintex FPGA to evaluate its performance. Compared to an off-the-shelf\ndescriptor-based DMAC IP, we achieve 1.66x less latency launching transfers,\nincrease bus utilization up to 2.5x in an ideal memory system with\n64-byte-length transfers while requiring 11% fewer lookup tables, 23% fewer\nflip-flops, and no block RAMs. We can extend our lead in bus utilization to\n3.6x with 64-byte-length transfers in deep memory systems. We synthesized our\nDMAC in GlobalFoundries' GF12LP+ node, achieving a clock frequency of over 1.44\nGHz while occupying only 49.5 kGE.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u4f18\u5316\u7684\u63cf\u8ff0\u7b26DMA\u63a7\u5236\u5668\uff0c\u4e13\u95e8\u9488\u5bf9\u5c0f\u5c3a\u5bf8\u4f20\u8f93\u8fdb\u884c\u6548\u7387\u4f18\u5316\uff0c\u901a\u8fc7\u8f7b\u91cf\u7ea7\u63cf\u8ff0\u7b26\u683c\u5f0f\u548c\u63a8\u6d4b\u6027\u9884\u53d6\u673a\u5236\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4f20\u8f93\u6027\u80fd\u5e76\u964d\u4f4e\u4e86\u786c\u4ef6\u8d44\u6e90\u6d88\u8017\u3002", "motivation": "\u968f\u7740\u5f02\u6784\u8ba1\u7b97\u7cfb\u7edf\u548c\u673a\u5668\u5b66\u4e60\u5e94\u7528\u7684\u53d1\u5c55\uff0c\u5185\u5b58\u7cfb\u7edf\u9762\u4e34\u5904\u7406\u4efb\u610f\u4e14\u8981\u6c42\u66f4\u9ad8\u7684\u4f20\u8f93\u9700\u6c42\u3002\u4f20\u7edf\u63cf\u8ff0\u7b26DMA\u63a7\u5236\u5668\u5728\u5904\u7406\u5c0f\u5c3a\u5bf8\u4f20\u8f93\u65f6\u6548\u7387\u4f4e\u4e0b\uff0c\u5b58\u5728\u63cf\u8ff0\u7b26\u8fc7\u5927\u548c\u5904\u7406\u4e32\u884c\u5316\u5bfc\u81f4\u7684\u9759\u6001\u5f00\u9500\u95ee\u9898\u3002", "method": "\u8bbe\u8ba1\u8f7b\u91cf\u7ea7\u63cf\u8ff0\u7b26\u683c\u5f0f\u7684AXI4 DMA\u63a7\u5236\u5668\uff0c\u5b9e\u73b0\u4f4e\u5f00\u9500\u7684\u63a8\u6d4b\u6027\u63cf\u8ff0\u7b26\u9884\u53d6\u65b9\u6848\uff0c\u5373\u4f7f\u9884\u6d4b\u9519\u8bef\u4e5f\u4e0d\u4f1a\u589e\u52a0\u5ef6\u8fdf\u3002\u572864\u4f4dLinux\u517c\u5bb9\u7684RISC-V SoC\u4e2d\u96c6\u6210\uff0c\u5e76\u5728Kintex FPGA\u4e0a\u8fdb\u884c\u4eff\u771f\u8bc4\u4f30\u3002", "result": "\u76f8\u6bd4\u5546\u7528\u63cf\u8ff0\u7b26DMA IP\uff0c\u4f20\u8f93\u542f\u52a8\u5ef6\u8fdf\u51cf\u5c111.66\u500d\uff0c\u572864\u5b57\u8282\u4f20\u8f93\u7684\u7406\u60f3\u5185\u5b58\u7cfb\u7edf\u4e2d\u603b\u7ebf\u5229\u7528\u7387\u63d0\u53472.5\u500d\uff0c\u540c\u65f6\u51cf\u5c1111%\u67e5\u627e\u8868\u300123%\u89e6\u53d1\u5668\uff0c\u65e0\u9700\u5757RAM\u3002\u5728\u6df1\u5ea6\u5185\u5b58\u7cfb\u7edf\u4e2d64\u5b57\u8282\u4f20\u8f93\u7684\u603b\u7ebf\u5229\u7528\u7387\u4f18\u52bf\u53ef\u8fbe3.6\u500d\u3002\u5728GF12LP+\u5de5\u827a\u4e0b\u5b9e\u73b01.44GHz\u65f6\u949f\u9891\u7387\uff0c\u4ec5\u5360\u752849.5k\u95e8\u7b49\u6548\u9762\u79ef\u3002", "conclusion": "\u8be5\u4f18\u5316\u7684DMA\u63a7\u5236\u5668\u6709\u6548\u89e3\u51b3\u4e86\u5c0f\u5c3a\u5bf8\u4f20\u8f93\u7684\u6548\u7387\u95ee\u9898\uff0c\u5728\u6027\u80fd\u548c\u8d44\u6e90\u6548\u7387\u65b9\u9762\u5747\u663e\u8457\u4f18\u4e8e\u4f20\u7edf\u65b9\u6848\uff0c\u9002\u7528\u4e8e\u73b0\u4ee3\u5f02\u6784\u8ba1\u7b97\u7cfb\u7edf\u7684\u5185\u5b58\u4f20\u8f93\u9700\u6c42\u3002"}}
