{"id": "2509.25391", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.25391", "abs": "https://arxiv.org/abs/2509.25391", "authors": ["Fernanda Zapata Bascuñán", "Alan Ezequiel Fuster"], "title": "smallNet: Implementation of a convolutional layer in tiny FPGAs", "comment": null, "summary": "Since current neural network development systems in Xilinx and VLSI require\ncodevelopment with Python libraries, the first stage of a convolutional network\nhas been implemented by developing a convolutional layer entirely in Verilog.\nThis handcoded design, free of IP cores and based on a filter polynomial like\nstructure, enables straightforward deployment not only on low cost FPGAs but\nalso on SoMs, SoCs, and ASICs. We analyze the limitations of numerical\nrepresentations and compare our implemented architecture, smallNet, with its\ncomputer based counterpart, demonstrating a 5.1x speedup, over 81%\nclassification accuracy, and a total power consumption of just 1.5 W. The\nalgorithm is validated on a single-core Cora Z7, demonstrating its feasibility\nfor real time, resource-constrained embedded applications."}
{"id": "2509.25626", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.25626", "abs": "https://arxiv.org/abs/2509.25626", "authors": ["Yi Hu", "Huiyang Zhou"], "title": "LLM-Powered Code Analysis and Optimization for Gaussian Splatting Kernels", "comment": null, "summary": "3D Gaussian splatting (3DGS) is a transformative technique with profound\nimplications on novel view synthesis and real-time rendering. Given its\nimportance, there have been many attempts to improve its performance. However,\nwith the increasing complexity of GPU architectures and the vast search space\nof performance-tuning parameters, it is a challenging task. Although manual\noptimizations have achieved remarkable speedups, they require domain expertise\nand the optimization process can be highly time consuming and error prone. In\nthis paper, we propose to exploit large language models (LLMs) to analyze and\noptimize Gaussian splatting kernels. To our knowledge, this is the first work\nto use LLMs to optimize highly specialized real-world GPU kernels. We reveal\nthe intricacies of using LLMs for code optimization and analyze the code\noptimization techniques from the LLMs. We also propose ways to collaborate with\nLLMs to further leverage their capabilities. For the original 3DGS code on the\nMipNeRF360 datasets, LLMs achieve significant speedups, 19% with Deepseek and\n24% with GPT-5, demonstrating the different capabilities of different LLMs. By\nfeeding additional information from performance profilers, the performance\nimprovement from LLM-optimized code is enhanced to up to 42% and 38% on\naverage. In comparison, our best-effort manually optimized version can achieve\na performance improvement up to 48% and 39% on average, showing that there are\nstill optimizations beyond the capabilities of current LLMs. On the other hand,\neven upon a newly proposed 3DGS framework with algorithmic optimizations,\nSeele, LLMs can still further enhance its performance by 6%, showing that there\nare optimization opportunities missed by domain experts. This highlights the\npotential of collaboration between domain experts and LLMs."}
{"id": "2509.25853", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.25853", "abs": "https://arxiv.org/abs/2509.25853", "authors": ["Jingyao Zhang", "Jaewoo Park", "Jongeun Lee", "Elaheh Sadredini"], "title": "SAIL: SRAM-Accelerated LLM Inference System with Lookup-Table-based GEMV", "comment": null, "summary": "Large Language Model (LLM) inference requires substantial computational\nresources, yet CPU-based inference remains essential for democratizing AI due\nto the widespread availability of CPUs compared to specialized accelerators.\nHowever, efficient LLM inference on CPUs faces two fundamental challenges: (1)\nexisting CPU architectures struggle with low-precision arithmetic required by\nquantized models, where optimal bit precision varies across models and layers;\nand (2) the memory-bound nature of the token generation phase creates severe\nperformance bottlenecks. To address these challenges, we propose SAIL\n(SRAM-Accelerated Inference of LLMs), a CPU-based inference solution that\nefficiently supports arbitrary bit precisions with minimal overhead. SAIL\nintegrates three key innovations: First, we introduce Batched LUT-based General\nMatrix-Vector Multiplication (LUT-GEMV) with SRAM-based processing-in-memory,\nenabling high data reuse through lookup tables and reducing memory movement.\nSecond, our Pattern-Aware LUT optimization identifies and exploits redundancy\nin input activation patterns, reducing computation cycles by 13.8\\%. Third, we\ndevelop an in-memory type conversion algorithm that leverages PIM's parallelism\nfor efficient de-/quantization operations, alleviating pressure on CPU's vector\nunits. Our architecture requires only 2\\% hardware overhead and a single new\ninstruction, while maintaining dual functionality as both compute and storage\nunits. Experimental evaluations using a modified gem5 simulator demonstrate\nthat SAIL achieves up to 10.7x speedup and 19.9x higher tokens per dollar\ncompared to ARM Neoverse-N1 CPU baselines, and up to 7.04x better cost\nefficiency than NVIDIA V100 GPUs, establishing a practical path for efficient\nCPU-based LLM inference."}
{"id": "2509.26065", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.26065", "abs": "https://arxiv.org/abs/2509.26065", "authors": ["Alberto Scionti", "Paolo Savio", "Francesco Lubrano", "Olivier Terzo", "Marco Ferretti", "Florin Apopei", "Juri Bellucci", "Ennio Spano", "Luca Carriere"], "title": "Runtime Energy Monitoring for RISC-V Soft-Cores", "comment": null, "summary": "Energy efficiency is one of the major concern in designing advanced computing\ninfrastructures. From single nodes to large-scale systems (data centers),\nmonitoring the energy consumption of the computing system when applications run\nis a critical task. Designers and application developers often rely on software\ntools and detailed architectural models to extract meaningful information and\ndetermine the system energy consumption. However, when a design space\nexploration is required, designers may incur in continuous tuning of the models\nto match with the system under evaluation. To overcome such limitations, we\npropose a holistic approach to monitor energy consumption at runtime without\nthe need of running complex (micro-)architectural models. Our approach is based\non a measurement board coupled with a FPGA-based System-on-Module. The\nmeasuring board captures currents and voltages (up to tens measuring points)\ndriving the FPGA and exposes such values through a specific memory region. A\nrunning service reads and computes energy consumption statistics without\nconsuming extra resources on the FPGA device. Our approach is also scalable to\nmonitoring of multi-nodes infrastructures (clusters). We aim to leverage this\nframework to perform experiments in the context of an aeronautical design\napplication; specifically, we will look at optimizing performance and energy\nconsumption of a shallow artificial neural network on RISC-V based soft-cores."}
