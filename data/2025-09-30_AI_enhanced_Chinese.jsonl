{"id": "2509.22980", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.22980", "abs": "https://arxiv.org/abs/2509.22980", "authors": ["Jingyao Zhang", "Elaheh Sadredini"], "title": "\\textit{No One-Size-Fits-All}: A Workload-Driven Characterization of Bit-Parallel vs. Bit-Serial Data Layouts for Processing-using-Memory", "comment": null, "summary": "Processing-in-Memory (PIM) is a promising approach to overcoming the\nmemory-wall bottleneck. However, the PIM community has largely treated its two\nfundamental data layouts, Bit-Parallel (BP) and Bit-Serial (BS), as if they\nwere interchangeable. This implicit \"one-layout-fits-all\" assumption, often\nhard-coded into existing evaluation frameworks, creates a critical gap:\narchitects lack systematic, workload-driven guidelines for choosing the optimal\ndata layout for their target applications.\n  To address this gap, this paper presents the first systematic,\nworkload-driven characterization of BP and BS PIM architectures. We develop\niso-area, cycle-accurate BP and BS PIM architectural models and conduct a\ncomprehensive evaluation using a diverse set of benchmarks. Our suite includes\nboth fine-grained microworkloads from MIMDRAM to isolate specific operational\ncharacteristics, and large-scale applications from the PIMBench suite, such as\nthe VGG network, to represent realistic end-to-end workloads.\n  Our results quantitatively demonstrate that no single layout is universally\nsuperior; the optimal choice is strongly dependent on workload characteristics.\nBP excels on control-flow-intensive tasks with irregular memory access\npatterns, whereas BS shows substantial advantages in massively parallel,\nlow-precision (e.g., INT4/INT8) computations common in AI. Based on this\ncharacterization, we distill a set of actionable design guidelines for\narchitects. This work challenges the prevailing one-size-fits-all view on PIM\ndata layouts and provides a principled foundation for designing\nnext-generation, workload-aware, and potentially hybrid PIM systems.", "AI": {"tldr": "\u672c\u6587\u9996\u6b21\u7cfb\u7edf\u6027\u5730\u5206\u6790\u4e86PIM\u67b6\u6784\u4e2d\u4e24\u79cd\u57fa\u7840\u6570\u636e\u5e03\u5c40\uff08\u4f4d\u5e76\u884cBP\u548c\u4f4d\u4e32\u884cBS\uff09\u7684\u6027\u80fd\u5dee\u5f02\uff0c\u53d1\u73b0\u6ca1\u6709\u5355\u4e00\u5e03\u5c40\u9002\u7528\u4e8e\u6240\u6709\u573a\u666f\uff0c\u6700\u4f18\u9009\u62e9\u53d6\u51b3\u4e8e\u5de5\u4f5c\u8d1f\u8f7d\u7279\u6027\u3002", "motivation": "PIM\u793e\u533a\u957f\u671f\u4ee5\u6765\u5c06BP\u548cBS\u4e24\u79cd\u6570\u636e\u5e03\u5c40\u89c6\u4e3a\u53ef\u4e92\u6362\u7684\uff0c\u8fd9\u79cd\"\u4e00\u79cd\u5e03\u5c40\u9002\u5408\u6240\u6709\"\u7684\u5047\u8bbe\u7f3a\u4e4f\u7cfb\u7edf\u6027\u7684\u5de5\u4f5c\u8d1f\u8f7d\u9a71\u52a8\u6307\u5bfc\uff0c\u5bfc\u81f4\u67b6\u6784\u5e08\u65e0\u6cd5\u4e3a\u7279\u5b9a\u5e94\u7528\u9009\u62e9\u6700\u4f18\u6570\u636e\u5e03\u5c40\u3002", "method": "\u5f00\u53d1\u4e86\u7b49\u9762\u79ef\u3001\u5468\u671f\u7cbe\u786e\u7684BP\u548cBS PIM\u67b6\u6784\u6a21\u578b\uff0c\u4f7f\u7528\u591a\u6837\u5316\u57fa\u51c6\u6d4b\u8bd5\u5957\u4ef6\u8fdb\u884c\u7efc\u5408\u8bc4\u4f30\uff0c\u5305\u62ecMIMDRAM\u7684\u7ec6\u7c92\u5ea6\u5fae\u5de5\u4f5c\u8d1f\u8f7d\u548cPIMBench\u5957\u4ef6\u4e2d\u7684\u5927\u89c4\u6a21\u5e94\u7528\uff08\u5982VGG\u7f51\u7edc\uff09\u3002", "result": "BP\u5728\u63a7\u5236\u6d41\u5bc6\u96c6\u578b\u4efb\u52a1\u548c\u4e0d\u89c4\u5219\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f\u4e2d\u8868\u73b0\u4f18\u5f02\uff0c\u800cBS\u5728\u5927\u89c4\u6a21\u5e76\u884c\u3001\u4f4e\u7cbe\u5ea6\u8ba1\u7b97\uff08\u5982INT4/INT8\uff09\u4e2d\u5177\u6709\u663e\u8457\u4f18\u52bf\uff0c\u7279\u522b\u662f\u5728AI\u5e94\u7528\u4e2d\u3002", "conclusion": "\u6311\u6218\u4e86PIM\u6570\u636e\u5e03\u5c40\u7684\u901a\u7528\u5316\u89c2\u70b9\uff0c\u4e3a\u8bbe\u8ba1\u4e0b\u4e00\u4ee3\u5de5\u4f5c\u8d1f\u8f7d\u611f\u77e5\u548c\u6f5c\u5728\u6df7\u5408PIM\u7cfb\u7edf\u63d0\u4f9b\u4e86\u539f\u5219\u6027\u57fa\u7840\uff0c\u5e76\u63d0\u70bc\u51fa\u4e00\u5957\u53ef\u64cd\u4f5c\u7684\u8bbe\u8ba1\u6307\u5357\u3002"}}
{"id": "2509.22999", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.22999", "abs": "https://arxiv.org/abs/2509.22999", "authors": ["Sachin Sachdeva", "Jincong Lu", "Wantong Li", "Sheldon X. -D. Tan"], "title": "Enhanced Hybrid Temporal Computing Using Deterministic Summations for Ultra-Low-Power Accelerators", "comment": "8 pages", "summary": "This paper presents an accuracy-enhanced Hybrid Temporal Computing (E-HTC)\nframework for ultra-low-power hardware accelerators with deterministic\nadditions. Inspired by the recently proposed HTC architecture, which leverages\npulse-rate and temporal data encoding to reduce switching activity and energy\nconsumption but loses accuracy due to its multiplexer (MUX)-based scaled\naddition, we propose two bitstream addition schemes: (1) an Exact\nMultiple-input Binary Accumulator (EMBA), which performs precise binary\naccumulation, and (2) a Deterministic Threshold-based Scaled Adder (DTSA),\nwhich employs threshold logic for scaled addition. These adders are integrated\ninto a multiplier accumulator (MAC) unit supporting both unipolar and bipolar\nencodings. To validate the framework, we implement two accelerators: a Finite\nImpulse Response (FIR) filter and an 8-point Discrete Cosine Transform\n(DCT)/iDCT engine. Results on a 4x4 MAC show that, in unipolar mode, E-HTC\nmatches the RMSE of state-of-the-art Counter-Based Stochastic Computing (CBSC)\nMAC, improves accuracy by 94% over MUX-based HTC, and reduces power and area by\n23% and 7% compared to MUX-based HTC and 64% and 74% compared to CBSC. In\nbipolar mode, E-HTC MAC achieves 2.09% RMSE -- an 83% improvement over\nMUX-based HTC -- and approaches CBSC's 1.40% RMSE with area and power savings\nof 28% and 43% vs. MUX-based HTC and about 76% vs. CBSC. In FIR experiments,\nboth E-HTC variants yield PSNR gains of 3--5 dB (30--45% RMSE reduction) while\nsaving 13% power and 3% area. For DCT/iDCT, E-HTC boosts PSNR by 10--13 dB\n(70--75% RMSE reduction) while saving area and power over both MUX- and\nCBSC-based designs.", "AI": {"tldr": "\u63d0\u51fa\u4e86E-HTC\u6846\u67b6\uff0c\u901a\u8fc7\u7cbe\u786e\u7684EMBA\u548c\u786e\u5b9a\u6027\u7f29\u653e\u7684DTSA\u52a0\u6cd5\u5668\uff0c\u5728\u4fdd\u6301\u8d85\u4f4e\u529f\u8017\u7684\u540c\u65f6\u663e\u8457\u63d0\u9ad8\u4e86\u6df7\u5408\u65f6\u95f4\u8ba1\u7b97\u7684\u7cbe\u5ea6\uff0c\u5728FIR\u548cDCT\u5e94\u7528\u4e2d\u5b9e\u73b0\u4e86\u66f4\u597d\u7684\u7cbe\u5ea6-\u529f\u8017\u6743\u8861\u3002", "motivation": "\u73b0\u6709\u7684HTC\u67b6\u6784\u867d\u7136\u901a\u8fc7\u8109\u51b2\u7387\u548c\u65f6\u95f4\u6570\u636e\u7f16\u7801\u964d\u4f4e\u4e86\u529f\u8017\uff0c\u4f46\u7531\u4e8e\u57fa\u4e8eMUX\u7684\u7f29\u653e\u52a0\u6cd5\u5bfc\u81f4\u7cbe\u5ea6\u635f\u5931\uff0c\u9700\u8981\u5f00\u53d1\u66f4\u7cbe\u786e\u7684\u52a0\u6cd5\u65b9\u6848\u6765\u5e73\u8861\u7cbe\u5ea6\u548c\u529f\u8017\u3002", "method": "\u63d0\u51fa\u4e86\u4e24\u79cd\u4f4d\u6d41\u52a0\u6cd5\u65b9\u6848\uff1a\u7cbe\u786e\u591a\u8f93\u5165\u4e8c\u8fdb\u5236\u7d2f\u52a0\u5668(EMBA)\u548c\u786e\u5b9a\u6027\u9608\u503c\u7f29\u653e\u52a0\u6cd5\u5668(DTSA)\uff0c\u96c6\u6210\u5230\u652f\u6301\u5355\u6781\u548c\u53cc\u6781\u7f16\u7801\u7684MAC\u5355\u5143\u4e2d\uff0c\u5e76\u5728FIR\u6ee4\u6ce2\u5668\u548cDCT\u5f15\u64ce\u4e2d\u9a8c\u8bc1\u3002", "result": "\u57284x4 MAC\u4e2d\uff0c\u5355\u6781\u6a21\u5f0f\u4e0bE-HTC\u4e0eCBSC\u7684RMSE\u76f8\u5f53\uff0c\u6bd4MUX-HTC\u7cbe\u5ea6\u63d0\u9ad894%\uff0c\u529f\u8017\u548c\u9762\u79ef\u5206\u522b\u51cf\u5c1123%\u548c7%\uff1b\u53cc\u6781\u6a21\u5f0f\u4e0bRMSE\u4e3a2.09%\uff0c\u6bd4MUX-HTC\u63d0\u9ad883%\u3002\u5728FIR\u548cDCT\u5e94\u7528\u4e2d\u5747\u5b9e\u73b0\u4e86\u663e\u8457\u7684PSNR\u63d0\u5347\u548c\u529f\u8017\u9762\u79ef\u8282\u7701\u3002", "conclusion": "E-HTC\u6846\u67b6\u6210\u529f\u89e3\u51b3\u4e86HTC\u67b6\u6784\u7684\u7cbe\u5ea6\u95ee\u9898\uff0c\u5728\u4fdd\u6301\u8d85\u4f4e\u529f\u8017\u4f18\u52bf\u7684\u540c\u65f6\u663e\u8457\u63d0\u9ad8\u4e86\u8ba1\u7b97\u7cbe\u5ea6\uff0c\u4e3a\u8d85\u4f4e\u529f\u8017\u786c\u4ef6\u52a0\u901f\u5668\u63d0\u4f9b\u4e86\u66f4\u4f18\u7684\u7cbe\u5ea6-\u529f\u8017\u6743\u8861\u65b9\u6848\u3002"}}
{"id": "2509.23179", "categories": ["cs.AR", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.23179", "abs": "https://arxiv.org/abs/2509.23179", "authors": ["Jingyao Zhang", "Elaheh Sadredini"], "title": "A Near-Cache Architectural Framework for Cryptographic Computing", "comment": null, "summary": "Recent advancements in post-quantum cryptographic algorithms have led to\ntheir standardization by the National Institute of Standards and Technology\n(NIST) to safeguard information security in the post-quantum era. These\nalgorithms, however, employ public keys and signatures that are 3 to 9$\\times$\nlonger than those used in pre-quantum cryptography, resulting in significant\nperformance and energy efficiency overheads. A critical bottleneck identified\nin our analysis is the cache bandwidth. This limitation motivates the adoption\nof on-chip in-/near-cache computing, a computing paradigm that offers\nhigh-performance, exceptional energy efficiency, and flexibility to accelerate\npost-quantum cryptographic algorithms. Our analysis of existing works reveals\nchallenges in integrating in-/near-cache computing into modern computer systems\nand performance limitations due to external bandwidth limitation, highlighting\nthe need for innovative solutions that can seamlessly integrate into existing\nsystems without performance and energy efficiency issues. In this paper, we\nintroduce a near-cache-slice computing paradigm with support of customization\nand virtual address, named Crypto-Near-Cache (CNC), designed to accelerate\npost-quantum cryptographic algorithms and other applications. By placing SRAM\narrays with bitline computing capability near cache slices, high internal\nbandwidth and short data movement are achieved with native support of virtual\naddressing. An ISA extension to facilitate CNC is also proposed, with detailed\ndiscussion on the implementation aspects of the core/cache datapath.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3aCNC\u7684\u8fd1\u7f13\u5b58\u5207\u7247\u8ba1\u7b97\u8303\u5f0f\uff0c\u901a\u8fc7\u5c06\u5177\u6709\u4f4d\u7ebf\u8ba1\u7b97\u80fd\u529b\u7684SRAM\u9635\u5217\u653e\u7f6e\u5728\u7f13\u5b58\u5207\u7247\u9644\u8fd1\uff0c\u6765\u52a0\u901f\u540e\u91cf\u5b50\u5bc6\u7801\u7b97\u6cd5\u548c\u5176\u4ed6\u5e94\u7528\u3002", "motivation": "\u540e\u91cf\u5b50\u5bc6\u7801\u7b97\u6cd5\u7684\u516c\u94a5\u548c\u7b7e\u540d\u957f\u5ea6\u662f\u524d\u91cf\u5b50\u5bc6\u7801\u76843-9\u500d\uff0c\u5bfc\u81f4\u663e\u8457\u7684\u6027\u80fd\u548c\u80fd\u6548\u5f00\u9500\u3002\u5206\u6790\u53d1\u73b0\u7f13\u5b58\u5e26\u5bbd\u662f\u5173\u952e\u74f6\u9888\uff0c\u8fd9\u4fc3\u4f7f\u91c7\u7528\u7247\u4e0a\u8fd1\u7f13\u5b58\u8ba1\u7b97\u8303\u5f0f\u3002", "method": "\u8bbe\u8ba1CNC\u8fd1\u7f13\u5b58\u5207\u7247\u8ba1\u7b97\u8303\u5f0f\uff0c\u5728\u7f13\u5b58\u5207\u7247\u9644\u8fd1\u653e\u7f6e\u5177\u6709\u4f4d\u7ebf\u8ba1\u7b97\u80fd\u529b\u7684SRAM\u9635\u5217\uff0c\u5b9e\u73b0\u9ad8\u5185\u90e8\u5e26\u5bbd\u548c\u77ed\u6570\u636e\u79fb\u52a8\uff0c\u652f\u6301\u865a\u62df\u5730\u5740\uff0c\u5e76\u63d0\u51fa\u4e86ISA\u6269\u5c55\u3002", "result": "\u901a\u8fc7CNC\u5b9e\u73b0\u4e86\u9ad8\u5185\u90e8\u5e26\u5bbd\u548c\u77ed\u6570\u636e\u79fb\u52a8\uff0c\u539f\u751f\u652f\u6301\u865a\u62df\u5bfb\u5740\uff0c\u4e3a\u6838\u5fc3/\u7f13\u5b58\u6570\u636e\u8def\u5f84\u63d0\u4f9b\u4e86\u8be6\u7ec6\u5b9e\u73b0\u65b9\u6848\u3002", "conclusion": "CNC\u80fd\u591f\u65e0\u7f1d\u96c6\u6210\u5230\u73b0\u6709\u7cfb\u7edf\u4e2d\uff0c\u89e3\u51b3\u540e\u91cf\u5b50\u5bc6\u7801\u7b97\u6cd5\u7684\u6027\u80fd\u548c\u80fd\u6548\u95ee\u9898\uff0c\u4e3a\u5176\u4ed6\u5e94\u7528\u4e5f\u63d0\u4f9b\u4e86\u52a0\u901f\u80fd\u529b\u3002"}}
{"id": "2509.23674", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.23674", "abs": "https://arxiv.org/abs/2509.23674", "authors": ["Hongqin Lyu", "Yonghao Wang", "Yunlin Du", "Mingyu Shi", "Zhiteng Chao", "Wenxing Li", "Tiancheng Wang", "Huawei Li"], "title": "AssertGen: Enhancement of LLM-aided Assertion Generation through Cross-Layer Signal Bridging", "comment": "6 pages, 7 figures", "summary": "Assertion-based verification (ABV) serves as a crucial technique for ensuring\nthat register-transfer level (RTL) designs adhere to their specifications.\nWhile Large Language Model (LLM) aided assertion generation approaches have\nrecently achieved remarkable progress, existing methods are still unable to\neffectively identify the relationship between design specifications and RTL\ndesigns, which leads to the insufficiency of the generated assertions. To\naddress this issue, we propose AssertGen, an assertion generation framework\nthat automatically generates SystemVerilog assertions (SVA). AssertGen first\nextracts verification objectives from specifications using a chain-of-thought\n(CoT) reasoning strategy, then bridges corresponding signals between these\nobjectives and the RTL code to construct a cross-layer signal chain, and\nfinally generates SVAs based on the LLM. Experimental results demonstrate that\nAssertGen outperforms the existing state-of-the-art methods across several key\nmetrics, such as pass rate of formal property verification (FPV), cone of\ninfluence (COI), proof core and mutation testing coverage.", "AI": {"tldr": "AssertGen\u662f\u4e00\u4e2a\u57fa\u4e8eLLM\u7684\u65ad\u8a00\u751f\u6210\u6846\u67b6\uff0c\u901a\u8fc7\u94fe\u5f0f\u63a8\u7406\u63d0\u53d6\u9a8c\u8bc1\u76ee\u6807\u5e76\u6784\u5efa\u8de8\u5c42\u4fe1\u53f7\u94fe\uff0c\u663e\u8457\u63d0\u5347\u4e86SystemVerilog\u65ad\u8a00\u751f\u6210\u7684\u8d28\u91cf\u548c\u6548\u679c\u3002", "motivation": "\u73b0\u6709LLM\u8f85\u52a9\u7684\u65ad\u8a00\u751f\u6210\u65b9\u6cd5\u65e0\u6cd5\u6709\u6548\u8bc6\u522b\u8bbe\u8ba1\u89c4\u8303\u4e0eRTL\u8bbe\u8ba1\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u5bfc\u81f4\u751f\u6210\u7684\u65ad\u8a00\u4e0d\u5145\u5206\u3002", "method": "\u9996\u5148\u4f7f\u7528\u94fe\u5f0f\u63a8\u7406\u7b56\u7565\u4ece\u89c4\u8303\u4e2d\u63d0\u53d6\u9a8c\u8bc1\u76ee\u6807\uff0c\u7136\u540e\u5728\u76ee\u6807\u4e0eRTL\u4ee3\u7801\u4e4b\u95f4\u6865\u63a5\u76f8\u5e94\u4fe1\u53f7\u6784\u5efa\u8de8\u5c42\u4fe1\u53f7\u94fe\uff0c\u6700\u540e\u57fa\u4e8eLLM\u751f\u6210SystemVerilog\u65ad\u8a00\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u8868\u660eAssertGen\u5728\u5f62\u5f0f\u5c5e\u6027\u9a8c\u8bc1\u901a\u8fc7\u7387\u3001\u5f71\u54cd\u9525\u3001\u8bc1\u660e\u6838\u5fc3\u548c\u53d8\u5f02\u6d4b\u8bd5\u8986\u76d6\u7387\u7b49\u5173\u952e\u6307\u6807\u4e0a\u4f18\u4e8e\u73b0\u6709\u6700\u5148\u8fdb\u65b9\u6cd5\u3002", "conclusion": "AssertGen\u6846\u67b6\u901a\u8fc7\u6709\u6548\u8fde\u63a5\u8bbe\u8ba1\u89c4\u8303\u4e0eRTL\u4ee3\u7801\uff0c\u663e\u8457\u63d0\u5347\u4e86\u65ad\u8a00\u751f\u6210\u7684\u8d28\u91cf\u548c\u9a8c\u8bc1\u6548\u679c\u3002"}}
{"id": "2509.23693", "categories": ["cs.AR", "cs.OS"], "pdf": "https://arxiv.org/pdf/2509.23693", "abs": "https://arxiv.org/abs/2509.23693", "authors": ["Tao Lu", "Jiapin Wang", "Yelin Shan", "Xiangping Zhang", "Xiang Chen"], "title": "ASIC-based Compression Accelerators for Storage Systems: Design, Placement, and Profiling Insights", "comment": "16 pages", "summary": "Lossless compression imposes significant computational over head on\ndatacenters when performed on CPUs. Hardware compression and decompression\nprocessing units (CDPUs) can alleviate this overhead, but optimal algorithm\nselection, microarchitectural design, and system-level placement of CDPUs are\nstill not well understood. We present the design of an ASIC-based in-storage\nCDPU and provide a comprehensive end-to-end evaluation against two leading ASIC\naccelerators, Intel QAT 8970 and QAT 4xxx. The evaluation spans three dominant\nCDPU placement regimes: peripheral, on-chip, and in-storage. Our results\nreveal: (i) acute sensitivity of throughput and latency to CDPU placement and\ninterconnection, (ii) strong correlation between compression efficiency and\ndata patterns/layouts, (iii) placement-driven divergences between\nmicrobenchmark gains and real-application speedups, (iv) discrepancies between\nmodule and system-level power efficiency, and (v) scalability and multi-tenant\ninterference is sues of various CDPUs. These findings motivate a\nplacement-aware, cross-layer rethinking of hardware (de)compression for\nhyperscale storage infrastructures.", "AI": {"tldr": "\u672c\u6587\u8bc4\u4f30\u4e86ASIC\u5b58\u50a8\u5185\u538b\u7f29\u89e3\u538b\u5904\u7406\u5355\u5143(CDPU)\u7684\u8bbe\u8ba1\uff0c\u5e76\u4e0eIntel QAT\u7cfb\u5217\u52a0\u901f\u5668\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5206\u6790\u4e86\u4e09\u79cdCDPU\u90e8\u7f72\u4f4d\u7f6e\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u3002", "motivation": "CPU\u6267\u884c\u65e0\u635f\u538b\u7f29\u5728\u6570\u636e\u4e2d\u5fc3\u5e26\u6765\u663e\u8457\u8ba1\u7b97\u5f00\u9500\uff0c\u786c\u4ef6CDPU\u53ef\u4ee5\u7f13\u89e3\u6b64\u95ee\u9898\uff0c\u4f46\u6700\u4f18\u7b97\u6cd5\u9009\u62e9\u3001\u5fae\u67b6\u6784\u8bbe\u8ba1\u548c\u7cfb\u7edf\u7ea7\u90e8\u7f72\u4f4d\u7f6e\u5c1a\u672a\u5f97\u5230\u5145\u5206\u7406\u89e3\u3002", "method": "\u8bbe\u8ba1\u4e86ASIC\u5b58\u50a8\u5185CDPU\uff0c\u5e76\u4e0eIntel QAT 8970\u548cQAT 4xxx\u8fdb\u884c\u7aef\u5230\u7aef\u8bc4\u4f30\uff0c\u6db5\u76d6\u4e09\u79cd\u90e8\u7f72\u6a21\u5f0f\uff1a\u5916\u8bbe\u3001\u7247\u4e0a\u82af\u7247\u548c\u5b58\u50a8\u5185\u3002", "result": "\u53d1\u73b0\u541e\u5410\u91cf\u548c\u5ef6\u8fdf\u5bf9CDPU\u90e8\u7f72\u4f4d\u7f6e\u548c\u4e92\u8fde\u9ad8\u5ea6\u654f\u611f\uff1b\u538b\u7f29\u6548\u7387\u4e0e\u6570\u636e\u6a21\u5f0f/\u5e03\u5c40\u5f3a\u76f8\u5173\uff1b\u5fae\u57fa\u51c6\u6d4b\u8bd5\u589e\u76ca\u4e0e\u5b9e\u9645\u5e94\u7528\u52a0\u901f\u5b58\u5728\u5dee\u5f02\uff1b\u6a21\u5757\u7ea7\u4e0e\u7cfb\u7edf\u7ea7\u80fd\u6548\u5b58\u5728\u5dee\u5f02\uff1b\u5404\u79cdCDPU\u5b58\u5728\u53ef\u6269\u5c55\u6027\u548c\u591a\u79df\u6237\u5e72\u6270\u95ee\u9898\u3002", "conclusion": "\u8fd9\u4e9b\u53d1\u73b0\u4fc3\u4f7f\u9700\u8981\u91cd\u65b0\u601d\u8003\u8d85\u5927\u89c4\u6a21\u5b58\u50a8\u57fa\u7840\u8bbe\u65bd\u4e2d\u786c\u4ef6\u538b\u7f29\u89e3\u538b\u7684\u90e8\u7f72\u4f4d\u7f6e\u611f\u77e5\u548c\u8de8\u5c42\u8bbe\u8ba1\u65b9\u6cd5\u3002"}}
{"id": "2509.23972", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.23972", "abs": "https://arxiv.org/abs/2509.23972", "authors": ["Hongqin Lyu", "Yunlin Du", "Yonghao Wang", "Zhiteng Chao", "Tiancheng Wang", "Huawei Li"], "title": "AssertFix: Empowering Automated Assertion Fix via Large Language Models", "comment": "6 pages, 6 figures", "summary": "Assertion-based verification (ABV) is critical in ensuring that\nregister-transfer level (RTL) designs conform to their functional\nspecifications. SystemVerilog Assertions (SVA) effectively specify design\nproperties, but writing and maintaining them manually is challenging and\nerror-prone. Although recent progress of assertion generation methods\nleveraging large language models (LLMs) have shown great potential in improving\nassertion quality, they typically treat assertion generation as a final step,\nleaving the burden of fixing of the incorrect assertions to human effects,\nwhich may significantly limits the application of these methods. To address the\nabove limitation, we propose an automatic assertion fix framework based on\nLLMs, named AssertFix. AsserFix accurately locates the RTL code related to the\nincorrect assertion, systematically identifies the root causes of the assertion\nerrors, classifies the error type and finally applies dedicated fix strategies\nto automatically correct these errors, improving the overall quality of the\ngenerated assertions. Experimental results show that AssertFix achieves\nnoticeable improvements in both fix rate and verification coverage across the\nOpencore benchmarks.", "AI": {"tldr": "\u63d0\u51fa\u57fa\u4e8eLLM\u7684\u81ea\u52a8\u65ad\u8a00\u4fee\u590d\u6846\u67b6AssertFix\uff0c\u901a\u8fc7\u5b9a\u4f4dRTL\u4ee3\u7801\u3001\u8bc6\u522b\u9519\u8bef\u6839\u6e90\u3001\u5206\u7c7b\u9519\u8bef\u7c7b\u578b\u5e76\u5e94\u7528\u4e13\u7528\u4fee\u590d\u7b56\u7565\uff0c\u81ea\u52a8\u4fee\u6b63\u751f\u6210\u7684\u65ad\u8a00\u9519\u8bef\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8eLLM\u7684\u65ad\u8a00\u751f\u6210\u65b9\u6cd5\u5c06\u65ad\u8a00\u751f\u6210\u89c6\u4e3a\u6700\u7ec8\u6b65\u9aa4\uff0c\u9700\u8981\u4eba\u5de5\u4fee\u590d\u9519\u8bef\u65ad\u8a00\uff0c\u9650\u5236\u4e86\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5e94\u7528\u3002", "method": "AssertFix\u6846\u67b6\uff1a1\uff09\u51c6\u786e\u5b9a\u4f4d\u4e0e\u9519\u8bef\u65ad\u8a00\u76f8\u5173\u7684RTL\u4ee3\u7801\uff1b2\uff09\u7cfb\u7edf\u8bc6\u522b\u65ad\u8a00\u9519\u8bef\u7684\u6839\u672c\u539f\u56e0\uff1b3\uff09\u5206\u7c7b\u9519\u8bef\u7c7b\u578b\uff1b4\uff09\u5e94\u7528\u4e13\u7528\u4fee\u590d\u7b56\u7565\u81ea\u52a8\u4fee\u6b63\u9519\u8bef\u3002", "result": "\u5728Opencore\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cAssertFix\u5728\u4fee\u590d\u7387\u548c\u9a8c\u8bc1\u8986\u76d6\u7387\u65b9\u9762\u5747\u53d6\u5f97\u663e\u8457\u63d0\u5347\u3002", "conclusion": "AssertFix\u80fd\u591f\u81ea\u52a8\u4fee\u590d\u751f\u6210\u7684\u65ad\u8a00\u9519\u8bef\uff0c\u63d0\u9ad8\u65ad\u8a00\u8d28\u91cf\uff0c\u89e3\u51b3\u4e86\u73b0\u6709LLM\u65ad\u8a00\u751f\u6210\u65b9\u6cd5\u7684\u5c40\u9650\u6027\u3002"}}
{"id": "2509.24929", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.24929", "abs": "https://arxiv.org/abs/2509.24929", "authors": ["Hongwei Zhao", "Vianney Lapotre", "Guy Gogniat"], "title": "Fault Injection in On-Chip Interconnects: A Comparative Study of Wishbone, AXI-Lite, and AXI", "comment": "12 pages, 7 tables", "summary": "Fault injection attacks exploit physical disturbances to compromise the\nfunctionality and security of integrated circuits. As System on Chip (SoC)\narchitectures grow in complexity, the vulnerability of on chip communication\nfabrics has become increasingly prominent. Buses, serving as interconnects\namong various IP cores, represent potential vectors for fault-based\nexploitation. In this study, we perform simulation-driven fault injection\nacross three mainstream bus protocols Wishbone, AXI Lite, and AXI. We\nsystematically examine fault success rates, spatial vulnerability\ndistributions, and timing dependencies to characterize how faults interact with\nbus-level transactions. The results uncover consistent behavioral patterns\nacross protocols, offering practical insights for both attack modeling and the\ndevelopment of resilient SoC designs.", "AI": {"tldr": "\u8be5\u8bba\u6587\u901a\u8fc7\u4eff\u771f\u9a71\u52a8\u7684\u6545\u969c\u6ce8\u5165\u65b9\u6cd5\uff0c\u7cfb\u7edf\u5206\u6790\u4e86Wishbone\u3001AXI Lite\u548cAXI\u4e09\u79cd\u4e3b\u6d41\u603b\u7ebf\u534f\u8bae\u5728\u6545\u969c\u653b\u51fb\u4e0b\u7684\u8106\u5f31\u6027\uff0c\u63ed\u793a\u4e86\u603b\u7ebf\u534f\u8bae\u7684\u4e00\u81f4\u884c\u4e3a\u6a21\u5f0f\u3002", "motivation": "\u968f\u7740SoC\u67b6\u6784\u590d\u6742\u5ea6\u7684\u589e\u52a0\uff0c\u7247\u4e0a\u901a\u4fe1\u7ed3\u6784\uff08\u7279\u522b\u662f\u603b\u7ebf\uff09\u7684\u8106\u5f31\u6027\u65e5\u76ca\u7a81\u51fa\uff0c\u603b\u7ebf\u4f5c\u4e3aIP\u6838\u95f4\u7684\u4e92\u8fde\u7ed3\u6784\u53ef\u80fd\u6210\u4e3a\u6545\u969c\u653b\u51fb\u7684\u6f5c\u5728\u8f7d\u4f53\u3002", "method": "\u91c7\u7528\u4eff\u771f\u9a71\u52a8\u7684\u6545\u969c\u6ce8\u5165\u65b9\u6cd5\uff0c\u5bf9Wishbone\u3001AXI Lite\u548cAXI\u4e09\u79cd\u603b\u7ebf\u534f\u8bae\u8fdb\u884c\u7cfb\u7edf\u6027\u7684\u6545\u969c\u6ce8\u5165\u5206\u6790\uff0c\u8003\u5bdf\u6545\u969c\u6210\u529f\u7387\u3001\u7a7a\u95f4\u8106\u5f31\u6027\u5206\u5e03\u548c\u65f6\u95f4\u4f9d\u8d56\u6027\u3002", "result": "\u7814\u7a76\u7ed3\u679c\u63ed\u793a\u4e86\u603b\u7ebf\u534f\u8bae\u5728\u6545\u969c\u653b\u51fb\u4e0b\u7684\u4e00\u81f4\u884c\u4e3a\u6a21\u5f0f\uff0c\u4e3a\u653b\u51fb\u5efa\u6a21\u63d0\u4f9b\u4e86\u5b9e\u7528\u89c1\u89e3\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u653b\u51fb\u5efa\u6a21\u548c\u5f39\u6027SoC\u8bbe\u8ba1\u5f00\u53d1\u63d0\u4f9b\u4e86\u5b9e\u7528\u89c1\u89e3\uff0c\u6709\u52a9\u4e8e\u7406\u89e3\u6545\u969c\u5982\u4f55\u4e0e\u603b\u7ebf\u7ea7\u4e8b\u52a1\u4ea4\u4e92\u3002"}}
