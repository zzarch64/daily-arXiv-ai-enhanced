{"id": "2509.14388", "categories": ["cs.AR", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.14388", "abs": "https://arxiv.org/abs/2509.14388", "authors": ["Lennart Bamberg", "Filippo Minnella", "Roberto Bosio", "Fabrizio Ottati", "Yuebin Wang", "Jongmin Lee", "Luciano Lavagno", "Adam Fuks"], "title": "eIQ Neutron: Redefining Edge-AI Inference with Integrated NPU and Compiler Innovations", "comment": "Submitted to IEEE Transactions on Computers", "summary": "Neural Processing Units (NPUs) are key to enabling efficient AI inference in\nresource-constrained edge environments. While peak tera operations per second\n(TOPS) is often used to gauge performance, it poorly reflects real-world\nperformance and typically rather correlates with higher silicon cost. To\naddress this, architects must focus on maximizing compute utilization, without\nsacrificing flexibility. This paper presents the eIQ Neutron efficient-NPU,\nintegrated into a commercial flagship MPU, alongside co-designed compiler\nalgorithms. The architecture employs a flexible, data-driven design, while the\ncompiler uses a constrained programming approach to optimize compute and data\nmovement based on workload characteristics. Compared to the leading embedded\nNPU and compiler stack, our solution achieves an average speedup of 1.8x (4x\npeak) at equal TOPS and memory resources across standard AI-benchmarks. Even\nagainst NPUs with double the compute and memory resources, Neutron delivers up\nto 3.3x higher performance."}
{"id": "2509.14551", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.14551", "abs": "https://arxiv.org/abs/2509.14551", "authors": ["Xinyue Wu", "Zixuan Li", "Fan Hu", "Ting Lin", "Xiaotian Zhao", "Runxi Wang", "Xinfei Guo"], "title": "Shift-Left Techniques in Electronic Design Automation: A Survey", "comment": null, "summary": "The chip design process involves numerous steps, beginning with defining\nproduct requirements and progressing through architectural planning,\nsystem-level design, and the physical layout of individual circuit blocks. As\nthe enablers of large-scale chip development, Electronic Design Automation\n(EDA) tools play a vital role in helping designers achieve high-quality\nresults. The Shift-Left methodology introduces a pathway toward creating\ndigital twins and fusing multiple design steps, thereby transitioning\ntraditionally sequential, physically-aware processes into virtual design\nenvironments. This shift allows designers to establish stronger correlations\nearlier and optimize designs more effectively. However, challenges remain,\nespecially in accurately replicating downstream behaviors and determining the\nright scope and timing for adoption. These challenges, in turn, have revealed\nnew opportunities for EDA vendors, physical designers, and logic designers\nalike. As the industry advances toward intelligent EDA tools and techniques, it\nis timely to reflect on Shift-Left progress made and the challenges that\nremain. The rise of AI techniques and the momentum of open-source design flows\nhave significantly strengthened prediction and modeling capabilities, making\ndata-driven methods increasingly relevant to the EDA community. This, in turn,\nenhances the ''Shift-Left'' features embedded in current tools. In this paper,\nwe present a comprehensive survey of existing and emerging paradigms in\nShift-Left research within EDA and the broader design ecosystem. Our goal is to\nprovide a unique perspective on the state of the field and its future\ndirections. Relevant papers mentioned are organized in\nhttps://github.com/iCAS-SJTU/Shift-Left-EDA-Papers."}
{"id": "2509.14668", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.14668", "abs": "https://arxiv.org/abs/2509.14668", "authors": ["Yonghao Wang", "Jiaxin Zhou", "Hongqin Lyu", "Zhiteng Chao", "Tiancheng Wang", "Huawei Li"], "title": "DeepAssert: An LLM-Aided Verification Framework with Fine-Grained Assertion Generation for Modules with Extracted Module Specifications", "comment": "7 pages, 8 figures", "summary": "Assertion-Based Verification (ABV) is a crucial method for ensuring that\nlogic designs conform to their architectural specifications. However, existing\nassertion generation methods primarily rely on information either from the\ndesign specification, or register-transfer level (RTL) code. The former methods\nare typically limited to generating assertions for the top-level design. As the\ntop-level design is composed of different modules without module-level\nspecifications, they are unable to generate deep assertions that target the\ninternal functionality of modules. The latter methods often rely on a golden\nRTL model, which is difficult to obtain. To address the above limitations, this\npaper presents a novel large language model (LLM)-aided verification framework\nnamed DeepAssert. DeepAssert is capable of analyzing the invocation\nrelationships between modules and extracting independent specifications for\neach module with its I/O port information. These extracted specifications are\nsubsequently used to guide LLMs to automatically generate fine-grained deep\nassertions for these modules. Our evaluation demonstrates that DeepAssert\nsignificantly outperforms existing methods such as AssertLLM and Spec2Assertion\nin generating high-quality deep assertions for modules. Furthermore, when\nintegrated with these methods, DeepAssert can enhance the overall quality of\nthe assertions generated. This allows for a more comprehensive and effective\nverification process."}
{"id": "2509.14781", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.14781", "abs": "https://arxiv.org/abs/2509.14781", "authors": ["Yimin Wang", "Yue Jiet Chong", "Xuanyao Fong"], "title": "LEAP: LLM Inference on Scalable PIM-NoC Architecture with Balanced Dataflow and Fine-Grained Parallelism", "comment": "Accepted to the 2025 International Conference on Computer-Aided\n  Design (ICCAD'25)", "summary": "Large language model (LLM) inference has been a prevalent demand in daily\nlife and industries. The large tensor sizes and computing complexities in LLMs\nhave brought challenges to memory, computing, and databus. This paper proposes\na computation/memory/communication co-designed non-von Neumann accelerator by\naggregating processing-in-memory (PIM) and computational network-on-chip (NoC),\ntermed LEAP. The matrix multiplications in LLMs are assigned to PIM or NoC\nbased on the data dynamicity to maximize data locality. Model partition and\nmapping are optimized by heuristic design space exploration. Dedicated\nfine-grained parallelism and tiling techniques enable high-throughput dataflow\nacross the distributed resources in PIM and NoC. The architecture is evaluated\non Llama 1B/8B/13B models and shows $\\sim$2.55$\\times$ throughput (tokens/sec)\nimprovement and $\\sim$71.94$\\times$ energy efficiency (tokens/Joule) boost\ncompared to the A100 GPU."}
{"id": "2509.15036", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.15036", "abs": "https://arxiv.org/abs/2509.15036", "authors": ["Yuehai Chen", "Farhad Merchant"], "title": "NEURAL: An Elastic Neuromorphic Architecture with Hybrid Data-Event Execution and On-the-fly Attention Dataflow", "comment": "Accepted by ASP-DAC 2026; 7 pages, 10 figures", "summary": "Spiking neural networks (SNNs) have emerged as a promising alternative to\nartificial neural networks (ANNs), offering improved energy efficiency by\nleveraging sparse and event-driven computation. However, existing hardware\nimplementations of SNNs still suffer from the inherent spike sparsity and\nmulti-timestep execution, which significantly increase latency and reduce\nenergy efficiency. This study presents NEURAL, a novel neuromorphic\narchitecture based on a hybrid data-event execution paradigm by decoupling\nsparsity-aware processing from neuron computation and using elastic\nfirst-in-first-out (FIFO). NEURAL supports on-the-fly execution of spiking\nQKFormer by embedding its operations within the baseline computing flow without\nrequiring dedicated hardware units. It also integrates a novel\nwindow-to-time-to-first-spike (W2TTFS) mechanism to replace average pooling and\nenable full-spike execution. Furthermore, we introduce a knowledge distillation\n(KD)-based training framework to construct single-timestep SNN models with\ncompetitive accuracy. NEURAL is implemented on a Xilinx Virtex-7 FPGA and\nevaluated using ResNet-11, QKFResNet-11, and VGG-11. Experimental results\ndemonstrate that, at the algorithm level, the VGG-11 model trained with KD\nimproves accuracy by 3.20% on CIFAR-10 and 5.13% on CIFAR-100. At the\narchitecture level, compared to existing SNN accelerators, NEURAL achieves a\n50% reduction in resource utilization and a 1.97x improvement in energy\nefficiency."}
{"id": "2509.15205", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.15205", "abs": "https://arxiv.org/abs/2509.15205", "authors": ["Kartik Prabhu", "Jeffrey Yu", "Xinyuan Allen Pan", "Zhouhua Xie", "Abigail Aleshire", "Zihan Chen", "Ammar Ali Ratnani", "Priyanka Raina"], "title": "Voyager: An End-to-End Framework for Design-Space Exploration and Generation of DNN Accelerators", "comment": null, "summary": "While deep neural networks (DNNs) have achieved state-of-the-art performance\nin fields from computer vision to natural language processing, efficiently\nrunning these computationally demanding models requires hardware accelerators.\nHowever, designing these accelerators is a time-consuming, labor-intensive\nprocess that does not scale well. While prior efforts have sought to automate\nDNN accelerator generation, they offer limited parameterization, cannot produce\nhigh-performance, tapeout-ready designs, provide limited support for datatypes\nand quantization schemes, and lack an integrated, end-to-end software compiler.\nThis work proposes Voyager, a high-level synthesis (HLS)-based framework for\ndesign space exploration (DSE) and generation of DNN accelerators. Voyager\novercomes the limitations of prior work by offering extensive configurability\nacross technology nodes, clock frequencies, and scales, with customizable\nparameters such as number of processing elements, on-chip buffer sizes, and\nexternal memory bandwidth. Voyager supports a wider variety of datatypes and\nquantization schemes versus prior work, including both built-in floating-point,\nposit and integer formats, as well as user-defined formats with both per-tensor\nscaling and microscaling quantization. Voyager's PyTorch-based compiler\nefficiently maps networks end-to-end on the generated hardware, with support\nfor quantization, fusion, and tiling. We evaluate Voyager on state-of-the-art\nvision and language models. Voyager enables fast DSE with full-dataset accuracy\nevaluation for datatypes and quantization schemes. Generated designs achieve a\nhigh utilization across models and scales, up to 99.8%, and outperform prior\ngenerators with up to 61% lower latency and 56% lower area. Compared to\nhand-optimized accelerators, Voyager achieves comparable performance, while\noffering much greater automation in design and workload mapping."}
