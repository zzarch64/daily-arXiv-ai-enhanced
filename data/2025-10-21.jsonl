{"id": "2510.15872", "categories": ["cs.AR", "cs.AI", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.15872", "abs": "https://arxiv.org/abs/2510.15872", "authors": ["Yun-Da Tsai", "Chang-Yu Chao", "Liang-Yeh Shen", "Tsung-Han Lin", "Haoyu Yang", "Mark Ho", "Yi-Chen Lu", "Wen-Hao Liu", "Shou-De Lin", "Haoxing Ren"], "title": "Multimodal Chip Physical Design Engineer Assistant", "comment": null, "summary": "Modern chip physical design relies heavily on Electronic Design Automation\n(EDA) tools, which often struggle to provide interpretable feedback or\nactionable guidance for improving routing congestion. In this work, we\nintroduce a Multimodal Large Language Model Assistant (MLLMA) that bridges this\ngap by not only predicting congestion but also delivering human-interpretable\ndesign suggestions. Our method combines automated feature generation through\nMLLM-guided genetic prompting with an interpretable preference learning\nframework that models congestion-relevant tradeoffs across visual, tabular, and\ntextual inputs. We compile these insights into a \"Design Suggestion Deck\" that\nsurfaces the most influential layout features and proposes targeted\noptimizations. Experiments on the CircuitNet benchmark demonstrate that our\napproach outperforms existing models on both accuracy and explainability.\nAdditionally, our design suggestion guidance case study and qualitative\nanalyses confirm that the learned preferences align with real-world design\nprinciples and are actionable for engineers. This work highlights the potential\nof MLLMs as interactive assistants for interpretable and context-aware physical\ndesign optimization."}
{"id": "2510.15878", "categories": ["cs.AR", "cs.OS", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.15878", "abs": "https://arxiv.org/abs/2510.15878", "authors": ["David A. Roberts"], "title": "Putting the Context back into Memory", "comment": null, "summary": "Requests arriving at main memory are often different from what programmers\ncan observe or estimate by using CPU-based monitoring. Hardware cache\nprefetching, memory request scheduling and interleaving cause a loss of\nobservability that limits potential data movement and tiering optimizations. In\nresponse, memory-side telemetry hardware like page access heat map units (HMU)\nand page prefetchers were proposed to inform Operating Systems with accurate\nusage data. However, it is still hard to map memory activity to software\nprogram functions and objects because of the decoupled nature of host\nprocessors and memory devices. Valuable program context is stripped out from\nthe memory bus, leaving only commands, addresses and data. Programmers have\nexpert knowledge of future data accesses, priorities, and access to processor\nstate, which could be useful hints for runtime memory device optimization. This\npaper makes context visible at memory devices by encoding any user-visible\nstate as detectable packets in the memory read address stream, in a\nnondestructive manner without significant capacity overhead, drivers or special\naccess privileges. We prototyped an end-to-end system with metadata injection\nthat can be reliably detected and decoded from a memory address trace, either\nby a host processor, or a memory module. We illustrate a use case with precise\ncode execution markers and object address range tracking. In the future, real\ntime metadata decoding with near-memory computing (NMC) could provide\ncustomized telemetry and statistics to users, or act on application hints to\nperform functions like prioritizing requests, remapping data and reconfiguring\ndevices."}
{"id": "2510.15880", "categories": ["cs.AR", "cs.ET"], "pdf": "https://arxiv.org/pdf/2510.15880", "abs": "https://arxiv.org/abs/2510.15880", "authors": ["Philip Emma", "Eren Kurshan"], "title": "Opportunities and Challenges for 3D Systems and Their Design", "comment": "IEEE Design and Computers", "summary": "Although it is not a new concept, 3D integration increasingly receives\nwidespread interest and focus as lithographic scaling becomes more challenging,\nand as the ability to make miniature vias greatly improves. Like Moores law, 3D\nintegration improves density. With improvements in packaging density, however,\ncome the challenges associated with its inherently higher power density. And\nthough it acts somewhat as a scaling accelerator, the vertical integration also\nposes new challenges to design and manufacturing technologies. The placement of\ncircuits, vias, and macros in the planes of a 3D stack must be co-designed\nacross layers (or must conform to new standards) so that, when assembled, they\nhave correct spatial correspondence. Each layer, although perhaps being a mere\nfunctional slice through a system (and we can slice the system in many\ndifferent ways), must be independently testable so that we can systematically\ntest and diagnose subsystems before and after final assembly. When those layers\nare assembled, they must come together in a way that enables a sensible yield\nand facilitates testing the finished product. To make the most of 3D\nintegration, we should articulate the leverages of 3D systems (other\nresearchers offer a more complete treatment elsewhere). Then we can enumerate\nand elucidate many of the new challenges posed by the design, assembly, and\ntest of 3D systems."}
{"id": "2510.15882", "categories": ["cs.AR", "cs.AI", "cs.DC", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.15882", "abs": "https://arxiv.org/abs/2510.15882", "authors": ["Ao Shen", "Rui Zhang", "Junping Zhao"], "title": "FlexLink: Boosting your NVLink Bandwidth by 27% without accuracy concern", "comment": null, "summary": "As large language models (LLMs) continue to scale, multi-node deployment has\nbecome a necessity. Consequently, communication has become a critical\nperformance bottleneck. Current intra-node communication libraries, like NCCL,\ntypically make use of a single interconnect such as NVLink. This approach\ncreates performance ceilings, especially on hardware like the H800 GPU where\nthe primary interconnect's bandwidth can become a bottleneck, and leaves other\nhardware resources like PCIe and Remote Direct Memory Access (RDMA)-capable\nNetwork Interface Cards (NICs) largely idle during intensive workloads. We\npropose FlexLink, the first collective communication framework to the best of\nour knowledge designed to systematically address this by aggregating these\nheterogeneous links-NVLink, PCIe, and RDMA NICs-into a single, high-performance\ncommunication fabric. FlexLink employs an effective two-stage adaptive load\nbalancing strategy that dynamically partitions communication traffic across all\navailable links, ensuring that faster interconnects are not throttled by slower\nones. On an 8-GPU H800 server, our design improves the bandwidth of collective\noperators such as AllReduce and AllGather by up to 26% and 27% over the NCCL\nbaseline, respectively. This gain is achieved by offloading 2-22% of the total\ncommunication traffic to the previously underutilized PCIe and RDMA NICs.\nFlexLink provides these improvements as a lossless, drop-in replacement\ncompatible with the NCCL API, ensuring easy adoption."}
{"id": "2510.15884", "categories": ["cs.AR", "cs.MS"], "pdf": "https://arxiv.org/pdf/2510.15884", "abs": "https://arxiv.org/abs/2510.15884", "authors": ["Faizan A Khattak", "Mantas Mikaitis"], "title": "Generalized Methodology for Determining Numerical Features of Hardware Floating-Point Matrix Multipliers: Part I", "comment": "Accepted for IEEE HPEC 2025", "summary": "Numerical features of matrix multiplier hardware units in NVIDIA and AMD data\ncentre GPUs have recently been studied. Features such as rounding,\nnormalisation, and internal precision of the accumulators are of interest. In\nthis paper, we extend the methodology for analysing those features, to\nconsumer-grade NVIDIA GPUs by implementing an architecture-independent test\nscheme for various input and output precision formats. Unlike current\napproaches, the proposed test vector generation method neither performs an\nexhaustive search nor relies on hard-coded {constants that are device-specific,\nyet remains applicable to a wide range of mixed-precision formats. We have\napplied the scheme to the RTX-3060 (Ampere architecture), and Ada RTX-1000 (Ada\nLovelace architecture) graphics cards and determined numerical features of\nmatrix multipliers for binary16, TensorFloat32, and bfloat16 input floating\npoint formats and binary16 and binary32 IEEE 754 output formats. Our\nmethodology allowed us to determine that} the numerical features of RTX-3060, a\nconsumer-grade GPU, are identical to those of the A100, a data centre GPU. We\ndo not expect our code to require any changes for performing analysis of matrix\nmultipliers on newer NVIDIA GPUs, Hopper or Blackwell, and their future\nsuccessors, and any input/output format combination, including the latest 8-bit\nfloating-point formats."}
{"id": "2510.15885", "categories": ["cs.AR", "cs.OS"], "pdf": "https://arxiv.org/pdf/2510.15885", "abs": "https://arxiv.org/abs/2510.15885", "authors": ["Dingcui Yu", "Zonghuan Yan", "Jialin Liu", "Yumiao Zhao", "Yanyun Wang", "Xinghui Duan", "Yina Lv", "Liang Shi"], "title": "ConZone+: Practical Zoned Flash Storage Emulation for Consumer Devices", "comment": null, "summary": "To facilitate the understanding and efficient enhancement of software and\nhardware design for consumer-grade zoned flash storage, ConZone is proposed as\nthe first emulator designed to model the resource constraints and architectural\nfeatures typical of such systems. It incorporates essential components commonly\ndeployed in consumer-grade devices, including limited logical to physical\nmapping caches, constrained write buffers, and hybrid flash media management.\nHowever, ConZone cannot be mounted with the file system due to the lack of\nin-place update capability, which is required by the metadata area of F2FS. To\nimprove the usability of the emulator, ConZone+ extends ConZone with support\nfor a block interface. We also provide a script to help the deployment and\nintroduces several enhancements over the original version. Users can explore\nthe internal architecture of consumer-grade zoned flash storage and integrate\ntheir optimizations with system software using ConZone+. We validate the\naccuracy of ConZone+ by comparing a hardware architecture representative of\nconsumer-grade zoned flash storage and comparing it with the state-of-the-art.\nIn addition, we conduct several case studies using ConZone+ to investigate the\ndesign of zoned storage and explore the inadequacies of the current file\nsystem."}
{"id": "2510.15887", "categories": ["cs.AR", "C.1.0; B.7.1"], "pdf": "https://arxiv.org/pdf/2510.15887", "abs": "https://arxiv.org/abs/2510.15887", "authors": ["Hyun Woo Kang", "Ji Woong Choi"], "title": "basic_RV32s: An Open-Source Microarchitectural Roadmap for RISC-V RV32I", "comment": "2 pages, 3 figures. Accepted to ISOCC 2025 (submitted 14 Jul. 2025;\n  accepted 8 Aug. 2025). To appear in the Proceedings of ISOCC 2025; oral\n  presentation on 17 Oct. 2025 (conference opens 15 Oct 2025). Camera-ready\n  version. Project repository: https://github.com/RISC-KC/basic_rv32s", "summary": "This paper introduces BASIC_RV32s, an open-source framework providing a\npractical microarchitectural roadmap for the RISC-V RV32I architecture,\naddressing the gap between theoretical knowledge and hardware implementation.\nFollowing the classic Patterson and Hennessy methodology, the design evolves\nfrom a basic single-cycle core to a 5-stage pipelined core design with full\nhazard forwarding, dynamic branch prediction, and exception handling. For\nverification, the final core design is integrated into a System-on-Chip (SoC)\nwith Universal Asynchronous Receiver-Transmitter (UART) communication\nimplemented on a Xilinx Artix-7 Field-Programmable Gate Array (FPGA), achieving\n1.09 Dhrystone million instructions per second per megahertz (DMIPS/MHz) at 50\nMHz. By releasing all Register-Transfer Level (RTL) source code, signal-level\nlogic block diagrams, and development logs under MIT license on GitHub,\nBASIC_RV32s offers a reproducible instructional pathway for the open-source\nhardware ecosystem."}
{"id": "2510.15888", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.15888", "abs": "https://arxiv.org/abs/2510.15888", "authors": ["Konstantinos Kafousis"], "title": "Limited Read-Write/Set Hardware Transactional Memory without modifying the ISA or the Coherence Protocol", "comment": null, "summary": "Hardware Transactional Memory (HTM) allows lock-free programming as easy as\nwith traditional coarse-grain locks or similar, while benefiting from the\nperformance advantages of fine-grained locking. Many HTM implementations have\nbeen proposed, but they have not received widespread adoption because of their\nhigh hardware complexity, their need for additions to the Instruction Set\nArchitecture (ISA), and often for modifications to the cache coherence\nprotocol.\n  We show that HTM can be implemented without adding new instructions -- merely\nby extending the semantics of two existing, Load-Linked and Store-Conditional.\nAlso, our proposed design does not modify or extend standard coherence\nprotocols. We further propose to drastically simplify the implementation of HTM\n-- confined to modifications in the L1 Data Cache only -- by restricting it to\napplications where the write set plus the read set of each transaction do not\nexceed a small number of cache lines. We also propose two alternative\nmechanisms to guarantee forward progress, both based on detecting retrial\nattempts.\n  We simulated our proposed design in Gem5, and we used it to implement several\npopular concurrent data structures, showing that a maximum of eight (8) words\n(cache lines) suffice for the write plus read sets. We provide a detailed\nexplanation of selected implementations, clarifying the intended usage of our\nHTM from a programmer's perspective. We evaluated our HTM under varying\ncontention levels to explore its scalability limits. The results indicate that\nour HTM provides good performance in concurrent data structures when contention\nis spread across multiple nodes: in such cases, the percentage of aborts\nrelative to successful commits is very low. In the atomic fetch-and-increment\nbenchmark for multiple shared counters, the results show that, under\nlow-congestion, our HTM improves performance relative to the TTS lock."}
{"id": "2510.15893", "categories": ["cs.AR", "cs.AI", "cs.DC", "cs.LG", "68M10, 68M14", "B.4.3; C.2.4; C.4; I.2"], "pdf": "https://arxiv.org/pdf/2510.15893", "abs": "https://arxiv.org/abs/2510.15893", "authors": ["Mikhail Bernadskiy", "Peter Carson", "Thomas Graham", "Taylor Groves", "Ho John Lee", "Eric Yeh"], "title": "Accelerating Frontier MoE Training with 3D Integrated Optics", "comment": "12 pages, 11 figures. To be published in Hot Interconnects 2025", "summary": "The unabated growth in AI workload demands is driving the need for concerted\nadvances in compute, memory, and interconnect performance. As traditional\nsemiconductor scaling slows, high-speed interconnects have emerged as the new\nscaling engine, enabling the creation of larger logical GPUs by linking many\nGPUs into a single, low-latency, high-bandwidth compute domain. While initial\nscale-up fabrics leveraged copper interconnects for their power and cost\nadvantages, the maximum reach of passive electrical interconnects\n(approximately 1 meter) effectively limits the scale-up domain to within a\nsingle rack. The advent of 3D-stacked optics and logic offers a transformative,\npower-efficient scale-up solution for connecting hundreds of GPU packages\n(thousands of GPUs) across multiple data center racks. This work explores the\ndesign tradeoffs of scale-up technologies and demonstrates how frontier LLMs\nnecessitate novel photonic solutions to achieve aggressive power and\nperformance targets. We model the benefits of 3D CPO (Passage) enabled GPUs and\nswitches within the scale-up domain when training Frontier Mixture of Experts\n(MoE) models exceeding one trillion parameters. Our results show that the\nsubstantial increases in bandwidth and radix enabled by 3D CPO allow for an 8X\nincrease in scale-up capability. This affords new opportunities for\nmulti-dimensional parallelism within the scale-up domain and results in a 2.7X\nreduction in time-to-train, unlocking unprecedented model scaling."}
{"id": "2510.15897", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.15897", "abs": "https://arxiv.org/abs/2510.15897", "authors": ["Kien Le Trung", "Truong-Son Hy"], "title": "DiffPlace: A Conditional Diffusion Framework for Simultaneous VLSI Placement Beyond Sequential Paradigms", "comment": null, "summary": "Chip placement, the task of determining optimal positions of circuit modules\non a chip canvas, is a critical step in the VLSI design flow that directly\nimpacts performance, power consumption, and routability. Traditional methods\nrely on analytical optimization or reinforcement learning, which struggle with\nhard placement constraints or require expensive online training for each new\ncircuit design. To address these limitations, we introduce DiffPlace, a\nframework that formulates chip placement as a conditional denoising diffusion\nprocess, enabling transferable placement policies that generalize to unseen\ncircuit netlists without retraining. DiffPlace leverages the generative\ncapabilities of diffusion models to efficiently explore the vast space of\nplacement while conditioning on circuit connectivity and relative quality\nmetrics to identify optimal solutions globally. Our approach combines\nenergy-guided sampling with constrained manifold diffusion to ensure placement\nlegality, achieving extremely low overlap across all experimental scenarios.\nOur method bridges the gap between optimization-based and learning-based\napproaches, offering a practical path toward automated, high-quality chip\nplacement for modern VLSI design. Our source code is publicly available at:\nhttps://github.com/HySonLab/DiffPlace/"}
{"id": "2510.15899", "categories": ["cs.AR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.15899", "abs": "https://arxiv.org/abs/2510.15899", "authors": ["Kiran Thorat", "Jiahui Zhao", "Yaotian Liu", "Amit Hasan", "Hongwu Peng", "Xi Xie", "Bin Lei", "Caiwen Ding"], "title": "LLM-VeriPPA: Power, Performance, and Area Optimization aware Verilog Code Generation with Large Language Models", "comment": null, "summary": "Large Language Models (LLMs) are gaining prominence in various fields, thanks\nto their ability to generate high- quality content from human instructions.\nThis paper delves into the field of chip design using LLMs, specifically in\nPower- Performance-Area (PPA) optimization and the generation of accurate\nVerilog codes for circuit designs. We introduce a novel framework VeriPPA\ndesigned to optimize PPA and generate Verilog code using LLMs. Our method\nincludes a two-stage process where the first stage focuses on improving the\nfunctional and syntactic correctness of the generated Verilog codes, while the\nsecond stage focuses on optimizing the Verilog codes to meet PPA constraints of\ncircuit designs, a crucial element of chip design. Our framework achieves an\n81.37% success rate in syntactic correctness and 62.06% in functional\ncorrectness for code genera- tion, outperforming current state-of-the-art\n(SOTA) methods. On the RTLLM dataset. On the VerilogEval dataset, our framework\nachieves 99.56% syntactic correctness and 43.79% functional correctness, also\nsurpassing SOTA, which stands at 92.11% for syntactic correctness and 33.57%\nfor functional correctness. Furthermore, Our framework able to optimize the PPA\nof the designs. These results highlight the potential of LLMs in handling\ncomplex technical areas and indicate an encouraging development in the\nautomation of chip design processes."}
{"id": "2510.15902", "categories": ["cs.AR", "cs.ET"], "pdf": "https://arxiv.org/pdf/2510.15902", "abs": "https://arxiv.org/abs/2510.15902", "authors": ["Shuhang Zhang", "Jelena Radulovic", "Thorsten Dworzak"], "title": "Fully Automated Verification Framework for Configurable IPs: From Requirements to Results", "comment": "DVCon Europe 2025", "summary": "The increasing competition in the semiconductor industry has created\nsignificant pressure to reduce chip prices while maintaining quality and\nreliability. Functional verification, particularly for configurable IPs, is a\nmajor contributor to development costs due to its complexity and\nresource-intensive nature. To address this, we propose a fully automated\nframework for requirements driven functional verification. The framework\nautomates key processes, including vPlan generation, testbench creation,\nregression execution, and reporting in a requirements management tool,\ndrastically reducing verification effort. This approach accelerates development\ncycles, minimizes human error, and enhances coverage, offering a scalable and\nefficient solution to the challenges of verifying configurable IPs."}
{"id": "2510.15904", "categories": ["cs.AR", "cs.SY", "eess.IV", "eess.SY"], "pdf": "https://arxiv.org/pdf/2510.15904", "abs": "https://arxiv.org/abs/2510.15904", "authors": ["Subhradip Chakraborty", "Ankur Singh", "Xuming Chen", "Gourav Datta", "Akhilesh R. Jaiswal"], "title": "NVM-in-Cache: Repurposing Commodity 6T SRAM Cache into NVM Analog Processing-in-Memory Engine using a Novel Compute-on-Powerline Scheme", "comment": "11 pages", "summary": "The rapid growth of deep neural network (DNN) workloads has significantly\nincreased the demand for large-capacity on-chip SRAM in machine learning (ML)\napplications, with SRAM arrays now occupying a substantial fraction of the\ntotal die area. To address the dual challenges of storage density and\ncomputation efficiency, this paper proposes an NVM-in-Cache architecture that\nintegrates resistive RAM (RRAM) devices into a conventional 6T-SRAM cell,\nforming a compact 6T-2R bit-cell. This hybrid cell enables Processing-in-Memory\n(PIM) mode, which performs massively parallel multiply-and-accumulate (MAC)\noperations directly on cache power lines while preserving stored cache data. By\nexploiting the intrinsic properties of the 6T-2R structure, the architecture\nachieves additional storage capability, high computational throughput without\nany bit-cell area overhead. Circuit- and array-level simulations in\nGlobalFoundries 22nm FDSOI technology demonstrate that the proposed design\nachieves a throughput of 0.4 TOPS and 491.78 TOPS/W. For 128 row-parallel\noperations, the CIFAR-10 classification is demonstrated by mapping a Resnet-18\nneural network, achieving an accuracy of 91.27%. These results highlight the\npotential of the NVM-in-Cache approach to serve as a scalable, energy-efficient\ncomputing method by re-purposing existing 6T SRAM cache architecture for\nnext-generation AI accelerators and general purpose processors."}
{"id": "2510.15906", "categories": ["cs.AR", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.15906", "abs": "https://arxiv.org/abs/2510.15906", "authors": ["Yunsheng Bai", "Ghaith Bany Hamad", "Chia-Tung Ho", "Syed Suhaib", "Haoxing Ren"], "title": "FVDebug: An LLM-Driven Debugging Assistant for Automated Root Cause Analysis of Formal Verification Failures", "comment": null, "summary": "Debugging formal verification (FV) failures represents one of the most\ntime-consuming bottlenecks in modern hardware design workflows. When properties\nfail, engineers must manually trace through complex counter-examples spanning\nmultiple cycles, analyze waveforms, and cross-reference design specifications\nto identify root causes - a process that can consume hours or days per bug.\nExisting solutions are largely limited to manual waveform viewers or simple\nautomated tools that cannot reason about the complex interplay between design\nintent and implementation logic. We present FVDebug, an intelligent system that\nautomates root-cause analysis by combining multiple data sources - waveforms,\nRTL code, design specifications - to transform failure traces into actionable\ninsights. Our approach features a novel pipeline: (1) Causal Graph Synthesis\nthat structures failure traces into directed acyclic graphs, (2) Graph Scanner\nusing batched Large Language Model (LLM) analysis with for-and-against\nprompting to identify suspicious nodes, and (3) Insight Rover leveraging\nagentic narrative exploration to generate high-level causal explanations.\nFVDebug further provides concrete RTL fixes through its Fix Generator.\nEvaluated on open benchmarks, FVDebug attains high hypothesis quality and\nstrong Pass@k fix rates. We further report results on two proprietary,\nproduction-scale FV counterexamples. These results demonstrate FVDebug's\napplicability from academic benchmarks to industrial designs."}
{"id": "2510.15907", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.15907", "abs": "https://arxiv.org/abs/2510.15907", "authors": ["Era Thaqi", "Dennis Eigner", "Arman Ferdowsi", "Ulrich Schmid"], "title": "Symbolic Timing Analysis of Digital Circuits Using Analytic Delay Functions", "comment": null, "summary": "We propose a novel approach to symbolic timing analysis for digital\nintegrated circuits based on recently developed analytic delay formulas for\n2-input NOR, NAND, and Muller-C gates by Ferdowsi et al. (NAHS 2025). Given a\nfixed order of the transitions of all input and internal signals of a circuit,\nour framework computes closed-form analytic delay expressions for all the\ninternal signal transition times that depend on (i) the symbolic transition\ntimes of the relevant input signals and (ii) the model parameters of the\nrelevant gates. The resulting formulas facilitate per-transition timing\nanalysis without any simulation, by instantiating the symbolic input transition\ntimes and the gate parameters. More importantly, however, they also enable an\n\\emph{analytic} study of the dependencies of certain timing properties on input\nsignals and gate parameters. For instance, differentiating a symbolic delay\nexpression with respect to a gate parameter or input transition time enables\nsensitivity analysis. As a proof of concept, we implement our approach using\nthe computer algebra system SageMath and apply it to the NOR-gate version of\nthe c17 slack benchmark circuit."}
{"id": "2510.15908", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.15908", "abs": "https://arxiv.org/abs/2510.15908", "authors": ["Hana Chitsaz", "Johnson Umeike", "Amirmahdi Namjoo", "Babak N. Safa", "Bahar Asgari"], "title": "Belenos: Bottleneck Evaluation to Link Biomechanics to Novel Computing Optimizations", "comment": null, "summary": "Finite element simulations are essential in biomechanics, enabling detailed\nmodeling of tissues and organs. However, architectural inefficiencies in\ncurrent hardware and software stacks limit performance and scalability,\nespecially for iterative tasks like material parameter identification. As a\nresult, workflows often sacrifice fidelity for tractability. Reconfigurable\nhardware, such as FPGAs, offers a promising path to domain-specific\nacceleration without the cost of ASICs, but its potential in biomechanics\nremains underexplored. This paper presents Belenos, a comprehensive workload\ncharacterization of finite element biomechanics using FEBio, a widely adopted\nsimulator, gem5 sensitivity studies, and VTune analysis. VTune results reveal\nthat smaller workloads experience moderate front-end stalls, typically around\n13.1%, whereas larger workloads are dominated by significant back-end\nbottlenecks, with backend-bound cycles ranging from 59.9% to over 82.2%.\nComplementary gem5 sensitivity studies identify optimal hardware configurations\nfor Domain-Specific Accelerators (DSA), showing that suboptimal pipeline,\nmemory, or branch predictor settings can degrade performance by up to 37.1%.\nThese findings underscore the need for architecture-aware co-design to\nefficiently support biomechanical simulation workloads."}
{"id": "2510.15910", "categories": ["cs.AR", "hep-ex"], "pdf": "https://arxiv.org/pdf/2510.15910", "abs": "https://arxiv.org/abs/2510.15910", "authors": ["Marvin Fuchs", "Lukas Scheller", "Timo Muscheid", "Oliver Sander", "Luis E. Ardila-Perez"], "title": "SoCks - Simplifying Firmware and Software Integration for Heterogeneous SoCs", "comment": "26 pages, single-column, 13 figures, 2 tables", "summary": "Modern heterogeneous System-on-Chip (SoC) devices integrate advanced\ncomponents into a single package, offering powerful capabilities while also\nintroducing significant complexity. To manage these sophisticated devices,\nfirmware and software developers need powerful development tools. However, as\nthese tools become increasingly complex, they often lack adequate support,\nresulting in a steep learning curve and challenging troubleshooting. To address\nthis, this work introduces System-on-Chip blocks (SoCks), a flexible and\nexpandable build framework that reduces complexity by partitioning the SoC\nimage into high-level units called blocks. SoCks builds each firmware and\nsoftware block in an encapsulated way, independently from other components of\nthe image, thereby reducing dependencies to a minimum. While some information\nexchange between the blocks is unavoidable to ensure seamless runtime\nintegration, this interaction is standardized via interfaces. A small number of\ndependencies and well-defined interfaces simplify the reuse of existing block\nimplementations and facilitate seamless substitution between versions-for\ninstance, when choosing root file systems for the embedded Linux operating\nsystem. Additionally, this approach facilitates the establishment of a\ndecentralized and partially automated development flow through Continuous\nIntegration and Continuous Delivery (CI/CD). Measurement results demonstrate\nthat SoCks can build a complete SoC image up to three times faster than\nestablished tools."}
{"id": "2510.15914", "categories": ["cs.AR", "cs.AI", "cs.PL"], "pdf": "https://arxiv.org/pdf/2510.15914", "abs": "https://arxiv.org/abs/2510.15914", "authors": ["Jiayu Zhao", "Song Chen"], "title": "VeriGRAG: Enhancing LLM-Based Verilog Code Generation with Structure-Aware Soft Prompts", "comment": "9 pages, 5 figures", "summary": "Large language models (LLMs) have demonstrated strong capabilities in\ngenerating Verilog code from natural language descriptions. However, Verilog\ncode inherently encodes structural information of hardware circuits.\nEffectively leveraging this structural information to enhance the functional\nand syntactic correctness of LLM-generated Verilog code remains a significant\nchallenge. To address this challenge, we propose VeriGRAG , a novel framework\nthat extracts structural graph embeddings from Verilog code using graph neural\nnetworks (GNNs). A multimodal retriever then selects the graph embeddings most\nrelevant to the given generation task, which are aligned with the code modality\nthrough the VeriFormer module to generate structure-aware soft prompts. Our\nexperiments demonstrate that VeriGRAG substantially improves the correctness of\nVerilog code generation, achieving state-of-the-art or superior performance\nacross both VerilogEval and RTLLM benchmarks."}
{"id": "2510.15917", "categories": ["cs.AR", "cs.AI", "cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15917", "abs": "https://arxiv.org/abs/2510.15917", "authors": ["Shai Bergman", "Won Wook Song", "Lukas Cavigelli", "Konstantin Berestizshevsky", "Ke Zhou", "Ji Zhang"], "title": "Intent-Driven Storage Systems: From Low-Level Tuning to High-Level Understanding", "comment": null, "summary": "Existing storage systems lack visibility into workload intent, limiting their\nability to adapt to the semantics of modern, large-scale data-intensive\napplications. This disconnect leads to brittle heuristics and fragmented,\nsiloed optimizations. To address these limitations, we propose Intent-Driven\nStorage Systems (IDSS), a vision for a new paradigm where large language models\n(LLMs) infer workload and system intent from unstructured signals to guide\nadaptive and cross-layer parameter reconfiguration. IDSS provides holistic\nreasoning for competing demands, synthesizing safe and efficient decisions\nwithin policy guardrails. We present four design principles for integrating\nLLMs into storage control loops and propose a corresponding system\narchitecture. Initial results on FileBench workloads show that IDSS can improve\nIOPS by up to 2.45X by interpreting intent and generating actionable\nconfigurations for storage components such as caching and prefetching. These\nfindings suggest that, when constrained by guardrails and embedded within\nstructured workflows, LLMs can function as high-level semantic optimizers,\nbridging the gap between application goals and low-level system control. IDSS\npoints toward a future in which storage systems are increasingly adaptive,\nautonomous, and aligned with dynamic workload demands."}
{"id": "2510.15926", "categories": ["cs.AR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.15926", "abs": "https://arxiv.org/abs/2510.15926", "authors": ["Ye Qiao", "Zhiheng Chen", "Yifan Zhang", "Yian Wang", "Sitao Huang"], "title": "TeLLMe v2: An Efficient End-to-End Ternary LLM Prefill and Decode Accelerator with Table-Lookup Matmul on Edge FPGAs", "comment": null, "summary": "With the emergence of wearable devices and other embedded systems, deploying\nlarge language models (LLMs) on edge platforms has become an urgent need.\nHowever, this is challenging because of their high computational and memory\ndemands. Although recent low-bit quantization methods (e.g., BitNet, DeepSeek)\ncompress weights to as low as 1.58~bits with minimal accuracy loss, edge\ndeployment is still constrained by limited on-chip resources, power budgets,\nand the often-neglected long latency of the prefill stage. We present\n\\textbf{TeLLMe}, the first table-lookup-based ternary LLM accelerator for\nlow-power edge FPGAs that fully supports both prefill and autoregressive\ndecoding using 1.58-bit weights and 8-bit activations. TeLLMe incorporates\nseveral novel techniques, including (1) a table-lookup-based ternary matrix\nmultiplication (TLMM) engine utilizing grouped activations and online\nprecomputation for low resource utilization and high throughput; (2) a\nfine-grained analytic URAM-based weight buffer management scheme for efficient\nloading and compute engine access; (3) a streaming dataflow architecture that\nfuses floating-point element-wise operations with linear computations to hide\nlatency; (4) a reversed-reordered prefill stage attention with fused attention\noperations for high memory efficiency; and (5) a resource-efficient specialized\ndecoding stage attention. Under a 5~W power budget, TeLLMe delivers up to\n25~tokens/s decoding throughput and 0.45--0.96~s time-to-first-token (TTFT) for\n64--128 token prompts, marking a significant energy-efficiency advancement in\nLLM inference on edge FPGAs."}
{"id": "2510.15927", "categories": ["cs.AR", "cs.DC", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.15927", "abs": "https://arxiv.org/abs/2510.15927", "authors": ["Krystian Chmielewski", "Jarosław Ławnicki", "Uladzislau Lukyanau", "Tadeusz Kobus", "Maciej Maciejewski"], "title": "UPMEM Unleashed: Software Secrets for Speed", "comment": null, "summary": "Developing kernels for Processing-In-Memory (PIM) platforms poses unique\nchallenges in data management and parallel programming on limited processing\nunits. Although software development kits (SDKs) for PIM, such as the UPMEM\nSDK, provide essential tools, these emerging platforms still leave significant\nroom for performance optimization. In this paper, we reveal surprising\ninefficiencies in UPMEM software stack and play with non-standard programming\ntechniques. By making simple modifications to the assembly generated by the\nUPMEM compiler, we achieve speedups of 1.6-2x in integer addition and 1.4-5.9x\nin integer multiplication, depending on the data type. We also demonstrate that\nbit-serial processing of low precision data is a viable option for UPMEM: in\nINT4 bit-serial dot-product calculation, UPMEM can achieve over 2.7x speedup\nover the baseline. Minor API extensions for PIM allocation that account for the\nnon-uniform memory access (NUMA) architecture of the server further improve the\nconsistency and throughput of host-PIM data transfers by up to 2.9x. Finally,\nwe show that, when the matrix is preloaded into PIM, our optimized kernels\noutperform a dual-socket CPU server by over 3x for INT8 generalized\nmatrix-vector multiplication (GEMV) and by 10x for INT4 GEMV. Our optimized\nINT8 GEMV kernel outperforms the baseline 3.5x."}
{"id": "2510.15930", "categories": ["cs.AR", "cs.AI", "cs.NE"], "pdf": "https://arxiv.org/pdf/2510.15930", "abs": "https://arxiv.org/abs/2510.15930", "authors": ["Philippe Magalhães", "Virginie Fresse", "Benoît Suffran", "Olivier Alata"], "title": "Implémentation Efficiente de Fonctions de Convolution sur FPGA à l'Aide de Blocs Paramétrables et d'Approximations Polynomiales", "comment": "in French language, XXXe Colloque Francophone de Traitement du Signal\n  et des Images (GRETSI), Aug 2025, Strabourg, France", "summary": "Implementing convolutional neural networks (CNNs) on field-programmable gate\narrays (FPGAs) has emerged as a promising alternative to GPUs, offering lower\nlatency, greater power efficiency and greater flexibility. However, this\ndevelopment remains complex due to the hardware knowledge required and the long\nsynthesis, placement and routing stages, which slow down design cycles and\nprevent rapid exploration of network configurations, making resource\noptimisation under severe constraints particularly challenging. This paper\nproposes a library of configurable convolution Blocks designed to optimize FPGA\nimplementation and adapt to available resources. It also presents a\nmethodological framework for developing mathematical models that predict FPGA\nresources utilization. The approach is validated by analyzing the correlation\nbetween the parameters, followed by error metrics. The results show that the\ndesigned blocks enable adaptation of convolution layers to hardware\nconstraints, and that the models accurately predict resource consumption,\nproviding a useful tool for FPGA selection and optimized CNN deployment."}
{"id": "2510.16040", "categories": ["cs.AR", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.16040", "abs": "https://arxiv.org/abs/2510.16040", "authors": ["Tianhua Xia", "Sai Qian Zhang"], "title": "Kelle: Co-design KV Caching and eDRAM for Efficient LLM Serving in Edge Computing", "comment": null, "summary": "Running Large Language Models (LLMs) on edge devices is crucial for reducing\nlatency, improving real-time processing, and enhancing privacy. By performing\ninference directly on the device, data does not need to be sent to the cloud,\nensuring faster responses and reducing reliance on network connectivity.\nHowever, implementing LLMs on edge devices presents challenges, particularly\nwith managing key-value (KV) caches, which plays a pivotal role in LLM serving.\nAs the input text lengthens, the size of the KV cache increases linearly with\nthe sequence length, leading to a significant memory footprint and data access\ncosts. On the other hand, edge devices have limited memory and computational\npower, making it hard to store and efficiently access the large caches needed\nfor LLM inference.\n  To mitigate the substantial overhead caused by KV cache, we propose using\nembedded DRAM (eDRAM) as the primary storage for LLM serving in edge device,\nwhich offers higher storage density compared to SRAM. However, to ensure data\nintegrity, eDRAM needs periodic refresh operations, which are power-intensive.\nTo reduce eDRAM costs and improve overall system performance, we\npropose~\\textit{Kelle}, a software-hardware co-design solution optimized for\ndeploying LLMs on eDRAM-based edge systems. Combined with our fine-grained\nmemory eviction, recomputation, and refresh control algorithms, the\n\\textit{Kelle} accelerator delivers a $3.9\\times$ speedup and $4.5\\times$\nenergy savings compared to existing baseline solutions."}
{"id": "2510.16487", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.16487", "abs": "https://arxiv.org/abs/2510.16487", "authors": ["Giovanni Agosta", "Stefano Cherubin", "Derek Christ", "Francesco Conti", "Asbjørn Djupdal", "Matthias Jung", "Georgios Keramidas", "Roberto Passerone", "Paolo Rech", "Elisa Ricci", "Philippe Velha", "Flavio Vella", "Kasim Sinan Yildirim", "Nils Wilbert"], "title": "Architecture, Simulation and Software Stack to Support Post-CMOS Accelerators: The ARCHYTAS Project", "comment": null, "summary": "ARCHYTAS aims to design and evaluate non-conventional hardware accelerators,\nin particular, optoelectronic, volatile and non-volatile processing-in-memory,\nand neuromorphic, to tackle the power, efficiency, and scalability bottlenecks\nof AI with an emphasis on defense use cases (e.g., autonomous vehicles,\nsurveillance drones, maritime and space platforms). In this paper, we present\nthe system architecture and software stack that ARCHYTAS will develop to\nintegrate and support those accelerators, as well as the simulation software\nneeded for early prototyping of the full system and its components."}
{"id": "2510.16622", "categories": ["cs.AR", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2510.16622", "abs": "https://arxiv.org/abs/2510.16622", "authors": ["Kazi Ababil Azam", "Hasan Masum", "Masfiqur Rahaman", "A. B. M. Alim Al Islam"], "title": "Towards Intelligent Traffic Signaling in Dhaka City Based on Vehicle Detection and Congestion Optimization", "comment": "10 pages, Submitted to IEEE Transactions on Intelligent\n  Transportation Systems (T-ITS)", "summary": "The vehicular density in urbanizing cities of developing countries such as\nDhaka, Bangladesh result in a lot of traffic congestion, causing poor on-road\nexperiences. Traffic signaling is a key component in effective traffic\nmanagement for such situations, but the advancements in intelligent traffic\nsignaling have been exclusive to developed countries with structured traffic.\nThe non-lane-based, heterogeneous traffic of Dhaka City requires a contextual\napproach. This study focuses on the development of an intelligent traffic\nsignaling system feasible in the context of developing countries such as\nBangladesh. We propose a pipeline leveraging Real Time Streaming Protocol\n(RTSP) feeds, a low resources system Raspberry Pi 4B processing, and a state of\nthe art YOLO-based object detection model trained on the Non-lane-based and\nHeterogeneous Traffic (NHT-1071) dataset to detect and classify heterogeneous\ntraffic. A multi-objective optimization algorithm, NSGA-II, then generates\noptimized signal timings, minimizing waiting time while maximizing vehicle\nthroughput. We test our implementation in a five-road intersection at Palashi,\nDhaka, demonstrating the potential to significantly improve traffic management\nin similar situations. The developed testbed paves the way for more contextual\nand effective Intelligent Traffic Signaling (ITS) solutions for developing\nareas with complicated traffic dynamics such as Dhaka City."}
{"id": "2510.17251", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.17251", "abs": "https://arxiv.org/abs/2510.17251", "authors": ["Chengxi Li", "Yang Sun", "Lei Chen", "Yiwen Wang", "Mingxuan Yuan", "Evangeline F. Y. Young"], "title": "SmaRTLy: RTL Optimization with Logic Inferencing and Structural Rebuilding", "comment": null, "summary": "This paper proposes smaRTLy: a new optimization technique for multiplexers in\nRegister-Transfer Level (RTL) logic synthesis. Multiplexer trees are very\ncommon in RTL designs, and traditional tools like Yosys optimize them by\ntraversing the tree and monitoring control port values. However, this method\ndoes not fully exploit the intrinsic logical relationships among signals or the\npotential for structural optimization. To address these limitations, we develop\ninnovative strategies to remove redundant multiplexer trees and restructure the\nremaining ones, significantly reducing the overall gate count. We evaluate\nsmaRTLy on the IWLS-2005 and RISC-V benchmarks, achieving an additional 8.95%\nreduction in AIG area compared to Yosys. We also evaluate smaRTLy on an\nindustrial benchmark in the scale of millions of gates, results show that\nsmaRTLy can remove 47.2% more AIG area than Yosys. These results demonstrate\nthe effectiveness of our logic inferencing and structural rebuilding techniques\nin enhancing the RTL optimization process, leading to more efficient hardware\ndesigns."}
