{"id": "2510.04158", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.04158", "abs": "https://arxiv.org/abs/2510.04158", "authors": ["Emad Jacob Maroun"], "title": "A Dense and Efficient Instruction Set Architecture Encoding", "comment": null, "summary": "Instruction density and encoding efficiency are some of the few things\ndirectly affected by an instruction set architecture's design. In contrast, a\nprocessor's implementation often significantly influences performance, power\nefficiency, and area usage. Therefore, a major goal of instruction set design\nshould be maximizing instruction density and encoding efficiency. This paper\nintroduces the design elements of the Scry instruction set architecture that\nmost significantly affect instruction density and encoding efficiency. Scry is\na novel and experimental instruction set that revisits first principles to\ndesign an instruction set fit for modern processor implementations. Scry uses\nforward-temporal referencing as a means of data flow, where instructions refer\nto which future instructions consume their outputs. It also uses internal\ntagging, where the processors track data types internally, to reduce the number\nof instructions needed and increase flexibility. Combining these two methods,\nScry achieves instruction-feature parity with RISC-V's RV64IMC using only\n2-byte instructions compared to RISC-V's 4 bytes. Scry's instructions occupy\nonly 28% of the 2-byte encoding space, where RV64IMC instructions occupy 68% of\nthe 4-byte encoding space. We show that hand-compiled Scry's static instruction\ndensity is comparable to RV64IMC for small functions and improves as functions\ngrow in size.", "AI": {"tldr": "Scry\u6307\u4ee4\u96c6\u67b6\u6784\u901a\u8fc7\u524d\u5411\u65f6\u95f4\u5f15\u7528\u548c\u5185\u90e8\u6807\u8bb0\u6280\u672f\uff0c\u57282\u5b57\u8282\u6307\u4ee4\u7a7a\u95f4\u5185\u5b9e\u73b0\u4e86\u4e0eRISC-V RV64IMC 4\u5b57\u8282\u6307\u4ee4\u76f8\u5f53\u7684\u529f\u80fd\uff0c\u6307\u4ee4\u5bc6\u5ea6\u663e\u8457\u63d0\u5347\u3002", "motivation": "\u6307\u4ee4\u96c6\u67b6\u6784\u8bbe\u8ba1\u76f4\u63a5\u5f71\u54cd\u6307\u4ee4\u5bc6\u5ea6\u548c\u7f16\u7801\u6548\u7387\uff0c\u800c\u5904\u7406\u5668\u5b9e\u73b0\u5219\u5f71\u54cd\u6027\u80fd\u3001\u529f\u8017\u548c\u9762\u79ef\u3002\u56e0\u6b64\uff0c\u8bbe\u8ba1\u9ad8\u5bc6\u5ea6\u548c\u9ad8\u6548\u7387\u7684\u6307\u4ee4\u96c6\u662f\u4e3b\u8981\u76ee\u6807\u3002", "method": "\u91c7\u7528\u524d\u5411\u65f6\u95f4\u5f15\u7528\u4f5c\u4e3a\u6570\u636e\u6d41\u65b9\u5f0f\uff08\u6307\u4ee4\u5f15\u7528\u672a\u6765\u6d88\u8d39\u5176\u8f93\u51fa\u7684\u6307\u4ee4\uff09\uff0c\u4ee5\u53ca\u5185\u90e8\u6807\u8bb0\u6280\u672f\uff08\u5904\u7406\u5668\u5185\u90e8\u8ddf\u8e2a\u6570\u636e\u7c7b\u578b\uff09\uff0c\u51cf\u5c11\u6240\u9700\u6307\u4ee4\u6570\u91cf\u5e76\u63d0\u9ad8\u7075\u6d3b\u6027\u3002", "result": "Scry\u4ec5\u4f7f\u75282\u5b57\u8282\u6307\u4ee4\u5c31\u5b9e\u73b0\u4e86RISC-V RV64IMC\u7684\u529f\u80fd\uff0c\u4ec5\u5360\u75282\u5b57\u8282\u7f16\u7801\u7a7a\u95f4\u768428%\uff0c\u800cRISC-V\u5360\u75284\u5b57\u8282\u7a7a\u95f4\u768468%\u3002\u624b\u7f16\u8bd1\u7684Scry\u9759\u6001\u6307\u4ee4\u5bc6\u5ea6\u5728\u5c0f\u51fd\u6570\u4e2d\u4e0eRV64IMC\u76f8\u5f53\uff0c\u968f\u51fd\u6570\u89c4\u6a21\u589e\u5927\u800c\u63d0\u5347\u3002", "conclusion": "Scry\u6307\u4ee4\u96c6\u901a\u8fc7\u521b\u65b0\u7684\u8bbe\u8ba1\u65b9\u6cd5\u663e\u8457\u63d0\u9ad8\u4e86\u6307\u4ee4\u5bc6\u5ea6\u548c\u7f16\u7801\u6548\u7387\uff0c\u4e3a\u73b0\u4ee3\u5904\u7406\u5668\u5b9e\u73b0\u63d0\u4f9b\u4e86\u66f4\u4f18\u5316\u7684\u6307\u4ee4\u96c6\u67b6\u6784\u3002"}}
