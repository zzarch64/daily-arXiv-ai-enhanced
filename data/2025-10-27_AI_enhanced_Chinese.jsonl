{"id": "2510.20981", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.20981", "abs": "https://arxiv.org/abs/2510.20981", "authors": ["Stefan Abi-Karam", "Rishov Sarkar", "Suhail Basalama", "Jason Cong", "Callie Hao"], "title": "FIFOAdvisor: A DSE Framework for Automated FIFO Sizing of High-Level Synthesis Designs", "comment": "Accepted and to be presented at ASP-DAC 2026", "summary": "Dataflow hardware designs enable efficient FPGA implementations via\nhigh-level synthesis (HLS), but correctly sizing first-in-first-out (FIFO)\nchannel buffers remains challenging. FIFO sizes are user-defined and balance\nlatency and area-undersized FIFOs cause stalls and potential deadlocks, while\noversized ones waste memory. Determining optimal sizes is non-trivial: existing\nmethods rely on restrictive assumptions, conservative over-allocation, or slow\nRTL simulations. We emphasize that runtime-based analyses (i.e., simulation)\nare the only reliable way to ensure deadlock-free FIFO optimization for\ndata-dependent designs.\n  We present FIFOAdvisor, a framework that automatically determines FIFO sizes\nin HLS designs. It leverages LightningSim, a 99.9\\% cycle-accurate simulator\nsupporting millisecond-scale incremental runs with new FIFO configurations.\nFIFO sizing is formulated as a dual-objective black-box optimization problem,\nand we explore heuristic and search-based methods to characterize the\nlatency-resource trade-off. FIFOAdvisor also integrates with Stream-HLS, a\nframework for optimizing affine dataflow designs lowered from C++, MLIR, or\nPyTorch, enabling deeper optimization of FIFOs in these workloads.\n  We evaluate FIFOAdvisor on Stream-HLS design benchmarks spanning linear\nalgebra and deep learning workloads. Our results reveal Pareto-optimal\nlatency-memory frontiers across optimization strategies. Compared to baseline\ndesigns, FIFOAdvisor achieves much lower memory usage with minimal delay\noverhead. Additionally, it delivers significant runtime speedups over\ntraditional HLS/RTL co-simulation, making it practical for rapid design space\nexploration. We further demonstrate its capability on a complex accelerator\nwith data-dependent control flow.\n  Code and results: https://github.com/sharc-lab/fifo-advisor", "AI": {"tldr": "FIFOAdvisor\u662f\u4e00\u4e2a\u81ea\u52a8\u786e\u5b9aHLS\u8bbe\u8ba1\u4e2dFIFO\u5927\u5c0f\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u9ad8\u6548\u7684\u4eff\u771f\u548c\u4f18\u5316\u7b97\u6cd5\uff0c\u5728\u4fdd\u8bc1\u65e0\u6b7b\u9501\u7684\u540c\u65f6\u6700\u5c0f\u5316\u5185\u5b58\u4f7f\u7528\u548c\u5ef6\u8fdf\u5f00\u9500\u3002", "motivation": "\u5728\u6570\u636e\u6d41\u786c\u4ef6\u8bbe\u8ba1\u4e2d\uff0c\u6b63\u786e\u786e\u5b9aFIFO\u901a\u9053\u7f13\u51b2\u533a\u5927\u5c0f\u5177\u6709\u6311\u6218\u6027\u3002\u8fc7\u5c0f\u7684FIFO\u4f1a\u5bfc\u81f4\u505c\u987f\u548c\u6b7b\u9501\uff0c\u8fc7\u5927\u7684FIFO\u4f1a\u6d6a\u8d39\u5185\u5b58\u3002\u73b0\u6709\u65b9\u6cd5\u5b58\u5728\u9650\u5236\u6027\u5047\u8bbe\u3001\u4fdd\u5b88\u8fc7\u5ea6\u5206\u914d\u6216\u4eff\u771f\u901f\u5ea6\u6162\u7684\u95ee\u9898\u3002", "method": "\u5229\u7528LightningSim\uff0899.9%\u5468\u671f\u7cbe\u786e\u4eff\u771f\u5668\uff09\u8fdb\u884c\u6beb\u79d2\u7ea7\u589e\u91cf\u4eff\u771f\uff0c\u5c06FIFO\u5927\u5c0f\u786e\u5b9a\u5efa\u6a21\u4e3a\u53cc\u76ee\u6807\u9ed1\u76d2\u4f18\u5316\u95ee\u9898\uff0c\u63a2\u7d22\u542f\u53d1\u5f0f\u548c\u57fa\u4e8e\u641c\u7d22\u7684\u65b9\u6cd5\u6765\u8868\u5f81\u5ef6\u8fdf-\u8d44\u6e90\u6743\u8861\u3002", "result": "\u5728Stream-HLS\u8bbe\u8ba1\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cFIFOAdvisor\u5b9e\u73b0\u4e86Pareto\u6700\u4f18\u7684\u5ef6\u8fdf-\u5185\u5b58\u524d\u6cbf\uff0c\u76f8\u6bd4\u57fa\u7ebf\u8bbe\u8ba1\u663e\u8457\u964d\u4f4e\u5185\u5b58\u4f7f\u7528\u4e14\u5ef6\u8fdf\u5f00\u9500\u6700\u5c0f\uff0c\u76f8\u6bd4\u4f20\u7edfHLS/RTL\u534f\u540c\u4eff\u771f\u5927\u5e45\u63d0\u5347\u8fd0\u884c\u901f\u5ea6\u3002", "conclusion": "FIFOAdvisor\u4e3a\u5feb\u901f\u8bbe\u8ba1\u7a7a\u95f4\u63a2\u7d22\u63d0\u4f9b\u4e86\u5b9e\u7528\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u6709\u6548\u4f18\u5316\u5177\u6709\u6570\u636e\u4f9d\u8d56\u63a7\u5236\u6d41\u7684\u590d\u6742\u52a0\u901f\u5668\u4e2d\u7684FIFO\u914d\u7f6e\u3002"}}
{"id": "2510.21533", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.21533", "abs": "https://arxiv.org/abs/2510.21533", "authors": ["Misaki Kida", "Shimpei Sato"], "title": "Hardware-Efficient Accurate 4-bit Multiplier for Xilinx 7 Series FPGAs", "comment": "5 pages, 5 figures", "summary": "As IoT and edge inference proliferate,there is a growing need to\nsimultaneously optimize area and delay in lookup-table (LUT)-based multipliers\nthat implement large numbers of low-bitwidth operations in parallel. This paper\nproposes a hardwareefficientaccurate 4-bit multiplier design for AMD Xilinx\n7-series FPGAs using only 11 LUTs and two CARRY4 blocks. By reorganizing the\nlogic functions mapped to the LUTs, the proposed method reduces the LUT count\nby one compared with the prior 12-LUT design while also shortening the critical\npath. Evaluation confirms that the circuit attains minimal resource usage and a\ncritical-path delay of 2.750 ns.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u786c\u4ef6\u9ad8\u6548\u76844\u4f4d\u4e58\u6cd5\u5668\u8bbe\u8ba1\uff0c\u4ec5\u4f7f\u752811\u4e2aLUT\u548c2\u4e2aCARRY4\u5757\uff0c\u76f8\u6bd4\u4e4b\u524d\u768412-LUT\u8bbe\u8ba1\u51cf\u5c111\u4e2aLUT\u5e76\u7f29\u77ed\u5173\u952e\u8def\u5f84\u3002", "motivation": "\u968f\u7740IoT\u548c\u8fb9\u7f18\u63a8\u7406\u7684\u666e\u53ca\uff0c\u9700\u8981\u5728\u67e5\u627e\u8868(LUT)\u4e58\u6cd5\u5668\u4e2d\u540c\u65f6\u4f18\u5316\u9762\u79ef\u548c\u5ef6\u8fdf\uff0c\u8fd9\u4e9b\u4e58\u6cd5\u5668\u5e76\u884c\u5b9e\u73b0\u5927\u91cf\u4f4e\u6bd4\u7279\u4f4d\u64cd\u4f5c\u3002", "method": "\u901a\u8fc7\u91cd\u65b0\u7ec4\u7ec7\u6620\u5c04\u5230LUT\u7684\u903b\u8f91\u51fd\u6570\uff0c\u5728AMD Xilinx 7\u7cfb\u5217FPGA\u4e0a\u8bbe\u8ba1\u51c6\u786e\u76844\u4f4d\u4e58\u6cd5\u5668\u3002", "result": "\u7535\u8def\u5b9e\u73b0\u4e86\u6700\u5c0f\u8d44\u6e90\u4f7f\u7528\u548c2.750 ns\u7684\u5173\u952e\u8def\u5f84\u5ef6\u8fdf\u3002", "conclusion": "\u8be5\u8bbe\u8ba1\u5728\u4fdd\u6301\u51c6\u786e\u6027\u7684\u540c\u65f6\uff0c\u5b9e\u73b0\u4e86\u8d44\u6e90\u4f7f\u7528\u548c\u5ef6\u8fdf\u7684\u53cc\u91cd\u4f18\u5316\u3002"}}
{"id": "2510.21547", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.21547", "abs": "https://arxiv.org/abs/2510.21547", "authors": ["Hangyu Zhang", "Sachin S. Sapatnekar"], "title": "Accelerating Electrostatics-based Global Placement with Enhanced FFT Computation", "comment": "ASPDAC 2025", "summary": "Global placement is essential for high-quality and efficient circuit\nplacement for complex modern VLSI designs. Recent advancements, such as\nelectrostatics-based analytic placement, have improved scalability and solution\nquality. This work demonstrates that using an accelerated FFT technique,\nAccFFT, for electric field computation significantly reduces runtime.\nExperimental results on standard benchmarks show significant improvements when\nincorporated into the ePlace-MS and Pplace-MS algorithms, e.g., a 5.78x speedup\nin FFT computation and a 32% total runtime improvement against ePlace-MS, with\n1.0% reduction of scaled half-perimeter wirelength after detailed placement.", "AI": {"tldr": "\u4f7f\u7528AccFFT\u52a0\u901fFFT\u6280\u672f\u8fdb\u884c\u7535\u573a\u8ba1\u7b97\uff0c\u663e\u8457\u964d\u4f4e\u4e86\u5168\u5c40\u5e03\u5c40\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u5728ePlace-MS\u548cPplace-MS\u7b97\u6cd5\u4e2d\u5b9e\u73b0\u4e865.78\u500dFFT\u8ba1\u7b97\u52a0\u901f\u548c32%\u603b\u8fd0\u884c\u65f6\u95f4\u6539\u8fdb\u3002", "motivation": "\u73b0\u4ee3\u590d\u6742VLSI\u8bbe\u8ba1\u9700\u8981\u9ad8\u8d28\u91cf\u548c\u9ad8\u6548\u7684\u7535\u8def\u5e03\u5c40\uff0c\u9759\u7535\u5206\u6790\u5e03\u5c40\u65b9\u6cd5\u867d\u7136\u6539\u8fdb\u4e86\u53ef\u6269\u5c55\u6027\u548c\u89e3\u51b3\u65b9\u6848\u8d28\u91cf\uff0c\u4f46\u8ba1\u7b97\u6548\u7387\u4ecd\u6709\u63d0\u5347\u7a7a\u95f4\u3002", "method": "\u91c7\u7528\u52a0\u901fFFT\u6280\u672f(AccFFT)\u8fdb\u884c\u7535\u573a\u8ba1\u7b97\uff0c\u5e76\u5c06\u5176\u96c6\u6210\u5230ePlace-MS\u548cPplace-MS\u5e03\u5c40\u7b97\u6cd5\u4e2d\u3002", "result": "\u5728\u6807\u51c6\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cFFT\u8ba1\u7b97\u901f\u5ea6\u63d0\u53475.78\u500d\uff0c\u603b\u8fd0\u884c\u65f6\u95f4\u6539\u8fdb32%\uff0c\u8be6\u7ec6\u5e03\u5c40\u540e\u7f29\u653e\u534a\u5468\u957f\u7ebf\u957f\u4ec5\u51cf\u5c111.0%\u3002", "conclusion": "AccFFT\u6280\u672f\u80fd\u663e\u8457\u63d0\u5347\u9759\u7535\u5206\u6790\u5e03\u5c40\u7b97\u6cd5\u7684\u8ba1\u7b97\u6548\u7387\uff0c\u4e3a\u590d\u6742VLSI\u8bbe\u8ba1\u63d0\u4f9b\u66f4\u9ad8\u6548\u7684\u5168\u5c40\u5e03\u5c40\u89e3\u51b3\u65b9\u6848\u3002"}}
