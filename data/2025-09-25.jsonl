{"id": "2509.19790", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.19790", "abs": "https://arxiv.org/abs/2509.19790", "authors": ["Anthony Faure-Gignoux", "Kevin Delmas", "Adrien Gauffriau", "Claire Pagetti"], "title": "Open-source Stand-Alone Versatile Tensor Accelerator", "comment": null, "summary": "Machine Learning (ML) applications demand significant computational\nresources, posing challenges for safety-critical domains like aeronautics. The\nVersatile Tensor Accelerator (VTA) is a promising FPGA-based solution, but its\nadoption was hindered by its dependency on the TVM compiler and by other code\nnon-compliant with certification requirements. This paper presents an\nopen-source, standalone Python compiler pipeline for the VTA, developed from\nscratch and designed with certification requirements, modularity, and\nextensibility in mind. The compiler's effectiveness is demonstrated by\ncompiling and executing LeNet-5 Convolutional Neural Network (CNN) using the\nVTA simulators, and preliminary results indicate a strong potential for scaling\nits capabilities to larger CNN architectures. All contributions are publicly\navailable."}
{"id": "2509.19873", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.19873", "abs": "https://arxiv.org/abs/2509.19873", "authors": ["Linfeng Zhong", "Songqiang Xu", "Huifeng Wen", "Tong Xie", "Qingyu Guo", "Yuan Wang", "Meng Li"], "title": "SpecMamba: Accelerating Mamba Inference on FPGA with Speculative Decoding", "comment": "Accepted by ICCAD'25", "summary": "The growing demand for efficient long-sequence modeling on edge devices has\npropelled widespread adoption of State Space Models (SSMs) like Mamba, due to\ntheir superior computational efficiency and scalability. As its autoregressive\ngeneration process remains memory-bound, speculative decoding has been proposed\nthat incorporates draft model generation and target model verification.\nHowever, directly applying speculative decoding to SSMs faces three key\nchallenges: (1) hidden state backtracking difficulties, (2) tree-based parallel\nverification incompatibility, and (3) hardware workload mismatch. To address\nthese challenges, we propose SpecMamba, the first FPGA-based accelerator for\nMamba with speculative decoding, which features system, algorithm, and hardware\nco-design. At the system level, we present a memory-aware hybrid backtracking\nstrategy to coordinate both models. At the algorithm level, we propose\nfirst-in-first-out (FIFO)-based tree verification with tiling to minimize\nmemory access. At the hardware level, we customize a dataflow that computes\nlinear layers in parallel and SSM layers in series to enable maximal\noverlapping. Implemented on AMD FPGA platforms (VHK158 and VCK190), SpecMamba\nachieves a 2.27x speedup over GPU baselines and a 2.85x improvement compared to\nprior FPGA solutions, while demonstrating 5.41x and 1.26x higher energy\nefficiency, respectively."}
{"id": "2509.19959", "categories": ["cs.AR", "cs.CR"], "pdf": "https://arxiv.org/pdf/2509.19959", "abs": "https://arxiv.org/abs/2509.19959", "authors": ["Antoine Plin", "Frédéric Fauberteau", "Nga Nguyen"], "title": "OpenGL GPU-Based Rowhammer Attack (Work in Progress)", "comment": "Presented at HS3 2025 Workshop", "summary": "Rowhammer attacks have emerged as a significant threat to modern DRAM-based\nmemory systems, leveraging frequent memory accesses to induce bit flips in\nadjacent memory cells. This work-in-progress paper presents an adaptive,\nmany-sided Rowhammer attack utilizing GPU compute shaders to systematically\nachieve high-frequency memory access patterns. Our approach employs statistical\ndistributions to optimize row targeting and avoid current mitigations. The\nmethodology involves initializing memory with known patterns, iteratively\nhammering victim rows, monitoring for induced errors, and dynamically adjusting\nparameters to maximize success rates. The proposed attack exploits the parallel\nprocessing capabilities of GPUs to accelerate hammering operations, thereby\nincreasing the probability of successful bit flips within a constrained\ntimeframe. By leveraging OpenGL compute shaders, our implementation achieves\nhighly efficient row hammering with minimal software overhead. Experimental\nresults on a Raspberry Pi 4 demonstrate that the GPU-based approach attains a\nhigh rate of bit flips compared to traditional CPU-based hammering, confirming\nits effectiveness in compromising DRAM integrity. Our findings align with\nexisting research on microarchitectural attacks in heterogeneous systems that\nhighlight the susceptibility of GPUs to security vulnerabilities. This study\ncontributes to the understanding of GPU-assisted fault-injection attacks and\nunderscores the need for improved mitigation strategies in future memory\narchitectures."}
{"id": "2509.20182", "categories": ["cs.AR", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.20182", "abs": "https://arxiv.org/abs/2509.20182", "authors": ["Amulya Bhattaram", "Janani Ramamoorthy", "Ranit Gupta", "Diana Marculescu", "Dimitrios Stamoulis"], "title": "Automated Multi-Agent Workflows for RTL Design", "comment": "Accepted: ML for Systems Workshop NeurIPS 2025", "summary": "The rise of agentic AI workflows unlocks novel opportunities for computer\nsystems design and optimization. However, for specialized domains such as\nprogram synthesis, the relative scarcity of HDL and proprietary EDA resources\nonline compared to more common programming tasks introduces challenges, often\nnecessitating task-specific fine-tuning, high inference costs, and\nmanually-crafted agent orchestration. In this work, we present VeriMaAS, a\nmulti-agent framework designed to automatically compose agentic workflows for\nRTL code generation. Our key insight is to integrate formal verification\nfeedback from HDL tools directly into workflow generation, reducing the cost of\ngradient-based updates or prolonged reasoning traces. Our method improves\nsynthesis performance by 5-7% for pass@k over fine-tuned baselines, while\nrequiring only a few hundred training examples, representing an\norder-of-magnitude reduction in supervision cost."}
