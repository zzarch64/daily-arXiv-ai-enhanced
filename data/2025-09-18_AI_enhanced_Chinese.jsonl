{"id": "2509.13557", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.13557", "abs": "https://arxiv.org/abs/2509.13557", "authors": ["Zesong Jiang", "Yuqi Sun", "Qing Zhong", "Mahathi Krishna", "Deepak Patil", "Cheng Tan", "Sriram Krishnamoorthy", "Jeff Zhang"], "title": "MACO: A Multi-Agent LLM-Based Hardware/Software Co-Design Framework for CGRAs", "comment": null, "summary": "Coarse-grained Reconfigurable Arrays (CGRAs) are a promising computing\narchitecture that can deliver high-performance, energy-efficient acceleration\nacross diverse domains. By supporting reconfiguration at the functional unit\nlevel, CGRAs efficiently adapt to varying computational patterns and optimize\nresource utilization. However, designing CGRAs is highly challenging due to the\nvast design space, independent architectural parameters, and the time-consuming\nnature of manual design. Fortunately, the rapid advancement of large language\nmodels (LLMs) presents new opportunities to automate this process.\n  In this work, we propose MACO -- an open-source multi-agent LLM-based\nframework for Hardware/Software (HW/SW) co-design of CGRAs. The framework\nemploys LLM reasoning to generate CGRAs across four stages: HW/SW co-design,\nDesign error correction, Best design selection, and Evaluation & Feedback.\nFurthermore, MACO iteratively optimizes the generated CGRAs, leveraging agent\nreasoning and feedback to achieve higher PPA (that is, power, performance, and\narea) design points for a given domain. In addition, we introduce an LLM\nself-learning mechanism that employs LLM-driven decision making to select the\noptimal CGRA to accelerate the design process.\n  We evaluate the framework with state-of-the-art LLM-based methods and manual\nCGRA design, in terms of performance, power consumption, and area. Experimental\nresults show that MACO efficiently generates high-quality CGRA architectures,\nsignificantly reducing manual design effort and demonstrating the potential of\nour framework for real-world CGRA design.", "AI": {"tldr": "MACO\u662f\u4e00\u4e2a\u57fa\u4e8e\u591a\u667a\u80fd\u4f53\u5927\u8bed\u8a00\u6a21\u578b\u7684\u5f00\u6e90\u6846\u67b6\uff0c\u7528\u4e8eCGRA\u7684\u786c\u4ef6/\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\uff0c\u901a\u8fc7LLM\u63a8\u7406\u81ea\u52a8\u751f\u6210\u548c\u4f18\u5316CGRA\u67b6\u6784\uff0c\u663e\u8457\u51cf\u5c11\u4eba\u5de5\u8bbe\u8ba1\u5de5\u4f5c\u91cf\u3002", "motivation": "CGRA\u8bbe\u8ba1\u9762\u4e34\u8bbe\u8ba1\u7a7a\u95f4\u5de8\u5927\u3001\u67b6\u6784\u53c2\u6570\u72ec\u7acb\u4ee5\u53ca\u4eba\u5de5\u8bbe\u8ba1\u8017\u65f6\u7b49\u6311\u6218\uff0c\u800c\u5927\u8bed\u8a00\u6a21\u578b\u7684\u5feb\u901f\u53d1\u5c55\u4e3a\u81ea\u52a8\u5316\u8fd9\u4e00\u8fc7\u7a0b\u63d0\u4f9b\u4e86\u65b0\u673a\u9047\u3002", "method": "\u91c7\u7528\u591a\u667a\u80fd\u4f53LLM\u6846\u67b6\uff0c\u901a\u8fc7\u56db\u4e2a\u9636\u6bb5\u8fdb\u884cHW/SW\u534f\u540c\u8bbe\u8ba1\uff1a\u786c\u4ef6/\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u3001\u8bbe\u8ba1\u9519\u8bef\u7ea0\u6b63\u3001\u6700\u4f73\u8bbe\u8ba1\u9009\u62e9\u3001\u8bc4\u4f30\u4e0e\u53cd\u9988\uff0c\u5e76\u5f15\u5165LLM\u81ea\u5b66\u4e60\u673a\u5236\u9009\u62e9\u6700\u4f18CGRA\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0cMACO\u80fd\u9ad8\u6548\u751f\u6210\u9ad8\u8d28\u91cf\u7684CGRA\u67b6\u6784\uff0c\u5728\u6027\u80fd\u3001\u529f\u8017\u548c\u9762\u79ef\u65b9\u9762\u4f18\u4e8e\u73b0\u6709LLM\u65b9\u6cd5\u548c\u4eba\u5de5\u8bbe\u8ba1\u3002", "conclusion": "\u8be5\u6846\u67b6\u5c55\u793a\u4e86\u591a\u667a\u80fd\u4f53LLM\u5728CGRA\u8bbe\u8ba1\u4e2d\u7684\u5de8\u5927\u6f5c\u529b\uff0c\u80fd\u591f\u663e\u8457\u51cf\u5c11\u4eba\u5de5\u8bbe\u8ba1\u5de5\u4f5c\u91cf\uff0c\u4e3a\u5b9e\u9645CGRA\u8bbe\u8ba1\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u81ea\u52a8\u5316\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.13694", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.13694", "abs": "https://arxiv.org/abs/2509.13694", "authors": ["Hanchen Ye", "Deming Chen"], "title": "StreamTensor: Make Tensors Stream in Dataflow Accelerators for LLMs", "comment": "Accepted by MICRO'25", "summary": "Efficient execution of deep learning workloads on dataflow architectures is\ncrucial for overcoming memory bottlenecks and maximizing performance. While\nstreaming intermediate results between computation kernels can significantly\nimprove efficiency, existing approaches struggle with inter-kernel\ncorrelations, external memory access management, and buffer optimization. In\nthis work, we propose StreamTensor, a compiler framework that automatically\nconstructs and optimizes stream-based dataflow accelerators. StreamTensor\nintroduces a novel iterative tensor type system to explicitly encode stream\nlayouts, enabling seamless kernel fusion, buffer allocation, and memory\noptimization. By systematically exploring three hierarchical design spaces,\nincluding tensor tiling, kernel fusion, and resource allocation, StreamTensor\nbalances computational intensity, memory efficiency, and data streaming to\nmaximize performance. Based on FPGA evaluations on Large Language Models (LLM),\nStreamTensor achieves up to 0.76x and 0.64x lower latency compared to the\nstate-of-the-art FPGA LLM accelerators and GPUs, and up to 1.99x higher energy\nefficiency compared to GPUs, making it a promising approach for scalable\ndataflow-based deep learning acceleration.", "AI": {"tldr": "StreamTensor\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u6846\u67b6\uff0c\u901a\u8fc7\u5f15\u5165\u8fed\u4ee3\u5f20\u91cf\u7c7b\u578b\u7cfb\u7edf\u81ea\u52a8\u6784\u5efa\u548c\u4f18\u5316\u57fa\u4e8e\u6d41\u7684\u6570\u636e\u6d41\u52a0\u901f\u5668\uff0c\u5728FPGA\u4e0a\u5b9e\u73b0\u6bd4\u73b0\u6709FPGA LLM\u52a0\u901f\u5668\u548cGPU\u66f4\u4f4e\u7684\u5ef6\u8fdf\u548c\u66f4\u9ad8\u7684\u80fd\u6548", "motivation": "\u89e3\u51b3\u6df1\u5ea6\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u5728\u6570\u636e\u6d41\u67b6\u6784\u4e0a\u6267\u884c\u65f6\u7684\u5185\u5b58\u74f6\u9888\u95ee\u9898\uff0c\u73b0\u6709\u65b9\u6cd5\u5728\u5904\u7406\u5185\u6838\u95f4\u76f8\u5173\u6027\u3001\u5916\u90e8\u5185\u5b58\u8bbf\u95ee\u7ba1\u7406\u548c\u7f13\u51b2\u533a\u4f18\u5316\u65b9\u9762\u5b58\u5728\u56f0\u96be", "method": "\u63d0\u51faStreamTensor\u7f16\u8bd1\u5668\u6846\u67b6\uff0c\u5f15\u5165\u65b0\u9896\u7684\u8fed\u4ee3\u5f20\u91cf\u7c7b\u578b\u7cfb\u7edf\u6765\u663e\u5f0f\u7f16\u7801\u6d41\u5e03\u5c40\uff0c\u901a\u8fc7\u7cfb\u7edf\u63a2\u7d22\u4e09\u4e2a\u5c42\u6b21\u5316\u8bbe\u8ba1\u7a7a\u95f4\uff08\u5f20\u91cf\u5206\u5757\u3001\u5185\u6838\u878d\u5408\u548c\u8d44\u6e90\u5206\u914d\uff09\u6765\u5e73\u8861\u8ba1\u7b97\u5f3a\u5ea6\u3001\u5185\u5b58\u6548\u7387\u548c\u6570\u636e\u6d41", "result": "\u5728FPGA\u4e0a\u7684\u5927\u578b\u8bed\u8a00\u6a21\u578b\u8bc4\u4f30\u4e2d\uff0c\u76f8\u6bd4\u6700\u5148\u8fdb\u7684FPGA LLM\u52a0\u901f\u5668\u548cGPU\uff0c\u5b9e\u73b0\u4e860.76\u500d\u548c0.64\u500d\u7684\u5ef6\u8fdf\u964d\u4f4e\uff0c\u4ee5\u53ca\u76f8\u6bd4GPU\u9ad8\u8fbe1.99\u500d\u7684\u80fd\u6548\u63d0\u5347", "conclusion": "StreamTensor\u4e3a\u57fa\u4e8e\u6570\u636e\u6d41\u7684\u53ef\u6269\u5c55\u6df1\u5ea6\u5b66\u4e60\u52a0\u901f\u63d0\u4f9b\u4e86\u4e00\u79cd\u6709\u524d\u666f\u7684\u65b9\u6cd5"}}
{"id": "2509.13710", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.13710", "abs": "https://arxiv.org/abs/2509.13710", "authors": ["Hongyi Li", "Songchen Ma", "Huanyu Qu", "Weihao Zhang", "Jia Chen", "Junfeng Lin", "Fengbin Tu", "Rong Zhao"], "title": "CompAir: Synergizing Complementary PIMs and In-Transit NoC Computation for Efficient LLM Acceleration", "comment": null, "summary": "The rapid advancement of Large Language Models (LLMs) has revolutionized\nvarious aspects of human life, yet their immense computational and energy\ndemands pose significant challenges for efficient inference. The memory wall,\nthe growing processor-memory speed disparity, remains a critical bottleneck for\nLLM. Process-In-Memory (PIM) architectures overcome limitations by co-locating\ncompute units with memory, leveraging 5-20$\\times$ higher internal bandwidth\nand enabling greater energy efficiency than GPUs. However, existing PIMs\nstruggle to balance flexibility, performance, and cost-efficiency for LLMs'\ndynamic memory-compute patterns and operator diversity. DRAM-PIM suffers from\ninter-bank communication overhead despite its vector parallelism. SRAM-PIM\noffers sub-10ns latency for matrix operation but is constrained by limited\ncapacity. This work introduces CompAir, a novel PIM architecture that\nintegrates DRAM-PIM and SRAM-PIM with hybrid bonding, enabling efficient linear\ncomputations while unlocking multi-granularity data pathways. We further\ndevelop CompAir-NoC, an advanced network-on-chip with an embedded arithmetic\nlogic unit that performs non-linear operations during data movement,\nsimultaneously reducing communication overhead and area cost. Finally, we\ndevelop a hierarchical Instruction Set Architecture that ensures both\nflexibility and programmability of the hybrid PIM. Experimental results\ndemonstrate that CompAir achieves 1.83-7.98$\\times$ prefill and\n1.95-6.28$\\times$ decode improvement over the current state-of-the-art fully\nPIM architecture. Compared to the hybrid A100 and HBM-PIM system, CompAir\nachieves 3.52$\\times$ energy consumption reduction with comparable throughput.\nThis work represents the first systematic exploration of hybrid DRAM-PIM and\nSRAM-PIM architectures with in-network computation capabilities, offering a\nhigh-efficiency solution for LLM.", "AI": {"tldr": "CompAir\u662f\u4e00\u79cd\u65b0\u578b\u6df7\u5408PIM\u67b6\u6784\uff0c\u901a\u8fc7DRAM-PIM\u548cSRAM-PIM\u7684\u6df7\u5408\u952e\u5408\u96c6\u6210\uff0c\u7ed3\u5408\u521b\u65b0\u7684\u7247\u4e0a\u7f51\u7edc\u8bbe\u8ba1\uff0c\u4e3a\u5927\u8bed\u8a00\u6a21\u578b\u63a8\u7406\u63d0\u4f9b\u4e86\u9ad8\u6548\u80fd\u3001\u4f4e\u80fd\u8017\u7684\u89e3\u51b3\u65b9\u6848\u3002", "motivation": "\u5927\u578b\u8bed\u8a00\u6a21\u578b\u7684\u8ba1\u7b97\u548c\u80fd\u8017\u9700\u6c42\u5de8\u5927\uff0c\u4f20\u7edfPIM\u67b6\u6784\u5728\u7075\u6d3b\u6027\u3001\u6027\u80fd\u548c\u6210\u672c\u6548\u7387\u65b9\u9762\u96be\u4ee5\u5e73\u8861LLM\u7684\u52a8\u6001\u5185\u5b58\u8ba1\u7b97\u6a21\u5f0f\u548c\u7b97\u5b50\u591a\u6837\u6027\u9700\u6c42\u3002", "method": "\u63d0\u51faCompAir\u6df7\u5408PIM\u67b6\u6784\uff0c\u96c6\u6210DRAM-PIM\u548cSRAM-PIM\uff0c\u5f00\u53d1CompAir-NoC\u7247\u4e0a\u7f51\u7edc\u8fdb\u884c\u975e\u7ebf\u6027\u8fd0\u7b97\uff0c\u5e76\u8bbe\u8ba1\u5206\u5c42\u6307\u4ee4\u96c6\u67b6\u6784\u786e\u4fdd\u7075\u6d3b\u6027\u548c\u53ef\u7f16\u7a0b\u6027\u3002", "result": "\u76f8\u6bd4\u6700\u5148\u8fdb\u7684\u5168PIM\u67b6\u6784\uff0cCompAir\u5728\u9884\u586b\u5145\u548c\u89e3\u7801\u9636\u6bb5\u5206\u522b\u5b9e\u73b01.83-7.98\u500d\u548c1.95-6.28\u500d\u7684\u6027\u80fd\u63d0\u5347\uff0c\u76f8\u6bd4\u6df7\u5408A100\u548cHBM-PIM\u7cfb\u7edf\u80fd\u8017\u964d\u4f4e3.52\u500d\u3002", "conclusion": "\u8fd9\u662f\u9996\u4e2a\u7cfb\u7edf\u63a2\u7d22\u6df7\u5408DRAM-PIM\u548cSRAM-PIM\u67b6\u6784\u5e76\u5177\u5907\u7f51\u7edc\u5185\u8ba1\u7b97\u80fd\u529b\u7684\u5de5\u4f5c\uff0c\u4e3aLLM\u63d0\u4f9b\u4e86\u9ad8\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.13765", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.13765", "abs": "https://arxiv.org/abs/2509.13765", "authors": ["Zhirui Huang", "Rui Ma", "Shijie Cao", "Ran Shu", "Ian Wang", "Ting Cao", "Chixiao Chen", "Yongqiang Xiong"], "title": "TENET: An Efficient Sparsity-Aware LUT-Centric Architecture for Ternary LLM Inference On Edge", "comment": null, "summary": "Ternary quantization has emerged as a powerful technique for reducing both\ncomputational and memory footprint of large language models (LLM), enabling\nefficient real-time inference deployment without significantly compromising\nmodel accuracy. Conventional LLM inference platforms (e.g GPUs) cannot\ncapitalize on its benefits, as they (i) lack native support for ternary\narithmetic and memory specialization and (ii) remain severely under-utilized in\nlow-batch, real-time scenarios. In this work, we propose TENET, a sparse-aware\nLUT-centric architecture that co-optimizes algorithm, compute, and memory for\nternary LLM inference. To maximize the efficiency of Ternary Linear layer,\nTENET introduces a Sparse Ternary LUT (STL) core that optimizes ternary\nmixed-precision GEMM using a symmetric precompute lookup table. It also\nfeatures Dynamic Activation N:M Sparsity to exploit the sparsity within the\nactivation of each token. Additionally, we propose a LUT-based 64B:80B ternary\nweight decompression module to fully exploit the memory efficiency of ternary\nvalues. At the system level, we design a heterogeneous TENET accelerator with\nfull programmability that integrates STL cores with high-precision cores. An\nassociated Linear-Projection-aware Sparse Attention dataflow is introduced to\noptimize memory access and hardware utilization. We implement TENET accelerator\nprototype on both FPGA and ASIC platforms. Experiments across various model\nsizes and workloads demonstrate that TENET-FPGA and TENET-ASIC improve energy\nefficiency by 4.3$\\times$ and 21.1$\\times$, respectively, compared to the A100\nGPU. Furthermore, TENET-ASIC achieves a 2.7$\\times$ average speedup compared to\nthe A100 GPU in end-to-end inference latency.", "AI": {"tldr": "TENET\u662f\u4e00\u4e2a\u9488\u5bf9\u4e09\u5143\u91cf\u5316LLM\u63a8\u7406\u7684\u7a00\u758f\u611f\u77e5LUT\u4e2d\u5fc3\u67b6\u6784\uff0c\u901a\u8fc7\u7b97\u6cd5\u3001\u8ba1\u7b97\u548c\u5185\u5b58\u534f\u540c\u4f18\u5316\uff0c\u5728FPGA\u548cASIC\u5e73\u53f0\u4e0a\u5206\u522b\u5b9e\u73b0\u4e864.3\u500d\u548c21.1\u500d\u7684\u80fd\u6548\u63d0\u5347\uff0c\u4ee5\u53ca2.7\u500d\u7684\u7aef\u5230\u7aef\u63a8\u7406\u5ef6\u8fdf\u52a0\u901f\u3002", "motivation": "\u4f20\u7edfGPU\u5e73\u53f0\u65e0\u6cd5\u5145\u5206\u5229\u7528\u4e09\u5143\u91cf\u5316\u7684\u4f18\u52bf\uff0c\u7f3a\u4e4f\u5bf9\u4e09\u5143\u7b97\u672f\u548c\u5185\u5b58\u4e13\u95e8\u5316\u7684\u539f\u751f\u652f\u6301\uff0c\u5728\u4f4e\u6279\u6b21\u5b9e\u65f6\u573a\u666f\u4e0b\u5229\u7528\u7387\u4e25\u91cd\u4e0d\u8db3\u3002", "method": "\u63d0\u51fa\u7a00\u758f\u611f\u77e5LUT\u4e2d\u5fc3\u67b6\u6784TENET\uff0c\u5305\u62ec\u7a00\u758f\u4e09\u5143LUT\u6838\u5fc3\u4f18\u5316\u4e09\u5143\u6df7\u5408\u7cbe\u5ea6GEMM\u3001\u52a8\u6001\u6fc0\u6d3bN:M\u7a00\u758f\u6027\u5229\u7528token\u5185\u7a00\u758f\u6027\u3001\u57fa\u4e8eLUT\u768464B:80B\u4e09\u5143\u6743\u91cd\u89e3\u538b\u7f29\u6a21\u5757\uff0c\u4ee5\u53ca\u7ebf\u6027\u6295\u5f71\u611f\u77e5\u7a00\u758f\u6ce8\u610f\u529b\u6570\u636e\u6d41\u3002", "result": "TENET-FPGA\u548cTENET-ASIC\u76f8\u6bd4A100 GPU\u5206\u522b\u5b9e\u73b04.3\u500d\u548c21.1\u500d\u7684\u80fd\u6548\u63d0\u5347\uff0cTENET-ASIC\u5728\u7aef\u5230\u7aef\u63a8\u7406\u5ef6\u8fdf\u4e0a\u5e73\u5747\u52a0\u901f2.7\u500d\u3002", "conclusion": "TENET\u67b6\u6784\u901a\u8fc7\u534f\u540c\u4f18\u5316\u7b97\u6cd5\u3001\u8ba1\u7b97\u548c\u5185\u5b58\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u4e09\u5143\u91cf\u5316LLM\u5728\u4f20\u7edf\u786c\u4ef6\u4e0a\u7684\u6548\u7387\u95ee\u9898\uff0c\u4e3a\u5b9e\u65f6\u63a8\u7406\u90e8\u7f72\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u786c\u4ef6\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.13997", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.13997", "abs": "https://arxiv.org/abs/2509.13997", "authors": ["Yu Zhu", "Aditya Dhakal", "Pedro Bruel", "Gourav Rattihalli", "Yunming Xiao", "Johann Lombardi", "Dejan Milojicic"], "title": "An RDMA-First Object Storage System with SmartNIC Offload", "comment": null, "summary": "AI training and inference impose sustained, fine-grain I/O that stresses\nhost-mediated, TCP-based storage paths. Motivated by kernel-bypass networking\nand user-space storage stacks, we revisit POSIX-compatible object storage for\nGPU-centric pipelines. We present ROS2, an RDMA-first object storage system\ndesign that offloads the DAOS client to an NVIDIA BlueField-3 SmartNIC while\nleaving the DAOS I/O engine unchanged on the storage server. ROS2 separates a\nlightweight control plane (gRPC for namespace and capability exchange) from a\nhigh-throughput data plane (UCX/libfabric over RDMA or TCP) and removes host\nmediation from the data path.\n  Using FIO/DFS across local and remote configurations, we find that on\nserver-grade CPUs RDMA consistently outperforms TCP for both large sequential\nand small random I/O. When the RDMA-driven DAOS client is offloaded to\nBlueField-3, end-to-end performance is comparable to the host, demonstrating\nthat SmartNIC offload preserves RDMA efficiency while enabling DPU-resident\nfeatures such as multi-tenant isolation and inline services (e.g.,\nencryption/decryption) close to the NIC. In contrast, TCP on the SmartNIC lags\nhost performance, underscoring the importance of RDMA for offloaded\ndeployments.\n  Overall, our results indicate that an RDMA-first, SmartNIC-offloaded\nobject-storage stack is a practical foundation for scaling data delivery in\nmodern LLM training environments; integrating optional GPU-direct placement for\nLLM tasks is left for future work.", "AI": {"tldr": "ROS2\u662f\u4e00\u4e2a\u57fa\u4e8eRDMA\u7684\u5bf9\u8c61\u5b58\u50a8\u7cfb\u7edf\uff0c\u5c06DAOS\u5ba2\u6237\u7aef\u5378\u8f7d\u5230NVIDIA BlueField-3 SmartNIC\u4e0a\uff0c\u901a\u8fc7\u5206\u79bb\u63a7\u5236\u5e73\u9762\u548c\u6570\u636e\u5e73\u9762\u6765\u63d0\u5347AI\u8bad\u7ec3\u4e2d\u7684\u5b58\u50a8\u6027\u80fd\u3002", "motivation": "AI\u8bad\u7ec3\u548c\u63a8\u7406\u9700\u8981\u6301\u7eed\u3001\u7ec6\u7c92\u5ea6\u7684I/O\u64cd\u4f5c\uff0c\u4f20\u7edf\u57fa\u4e8eTCP\u7684\u5b58\u50a8\u8def\u5f84\u5b58\u5728\u6027\u80fd\u74f6\u9888\uff0c\u9700\u8981\u91cd\u65b0\u5ba1\u89c6POSIX\u517c\u5bb9\u7684\u5bf9\u8c61\u5b58\u50a8\u65b9\u6848\u6765\u652f\u6301GPU\u4e2d\u5fc3\u5316\u6d41\u6c34\u7ebf\u3002", "method": "\u8bbe\u8ba1ROS2\u7cfb\u7edf\uff0c\u91c7\u7528RDMA\u4f18\u5148\u7684\u67b6\u6784\uff0c\u5c06DAOS\u5ba2\u6237\u7aef\u5378\u8f7d\u5230SmartNIC\uff0c\u4fdd\u6301\u63a7\u5236\u5e73\u9762\uff08gRPC\uff09\u548c\u6570\u636e\u5e73\u9762\uff08UCX/libfabric over RDMA\u6216TCP\uff09\u5206\u79bb\uff0c\u6d88\u9664\u6570\u636e\u8def\u5f84\u4e2d\u7684\u4e3b\u673a\u5e72\u9884\u3002", "result": "\u5b9e\u9a8c\u663e\u793aRDMA\u5728\u670d\u52a1\u5668\u7ea7CPU\u4e0a\u59cb\u7ec8\u4f18\u4e8eTCP\uff0c\u65e0\u8bba\u662f\u5927\u987a\u5e8fI/O\u8fd8\u662f\u5c0f\u968f\u673aI/O\u3002SmartNIC\u4e0a\u7684RDMA\u9a71\u52a8\u5ba2\u6237\u7aef\u6027\u80fd\u4e0e\u4e3b\u673a\u76f8\u5f53\uff0c\u800cTCP\u5728SmartNIC\u4e0a\u6027\u80fd\u8f83\u5dee\u3002", "conclusion": "RDMA\u4f18\u5148\u3001SmartNIC\u5378\u8f7d\u7684\u5bf9\u8c61\u5b58\u50a8\u6808\u662f\u73b0\u4ee3LLM\u8bad\u7ec3\u73af\u5883\u4e2d\u6269\u5c55\u6570\u636e\u4ea4\u4ed8\u7684\u5b9e\u7528\u57fa\u7840\uff0c\u672a\u6765\u53ef\u96c6\u6210GPU\u76f4\u63a5\u653e\u7f6e\u529f\u80fd\u3002"}}
{"id": "2509.14041", "categories": ["cs.AR", "cs.CL", "cs.OS", "cs.PF"], "pdf": "https://arxiv.org/pdf/2509.14041", "abs": "https://arxiv.org/abs/2509.14041", "authors": ["Henry Kao", "Nikhil Sreekumar", "Prabhdeep Singh Soni", "Ali Sedaghati", "Fang Su", "Bryan Chan", "Maziar Goudarzi", "Reza Azimi"], "title": "A TRRIP Down Memory Lane: Temperature-Based Re-Reference Interval Prediction For Instruction Caching", "comment": null, "summary": "Modern mobile CPU software pose challenges for conventional instruction cache\nreplacement policies due to their complex runtime behavior causing high reuse\ndistance between executions of the same instruction. Mobile code commonly\nsuffers from large amounts of stalls in the CPU frontend and thus starvation of\nthe rest of the CPU resources. Complexity of these applications and their code\nfootprint are projected to grow at a rate faster than available on-chip memory\ndue to power and area constraints, making conventional hardware-centric methods\nfor managing instruction caches to be inadequate. We present a novel\nsoftware-hardware co-design approach called TRRIP (Temperature-based\nRe-Reference Interval Prediction) that enables the compiler to analyze,\nclassify, and transform code based on \"temperature\" (hot/cold), and to provide\nthe hardware with a summary of code temperature information through a\nwell-defined OS interface based on using code page attributes. TRRIP's\nlightweight hardware extension employs code temperature attributes to optimize\nthe instruction cache replacement policy resulting in the eviction rate\nreduction of hot code. TRRIP is designed to be practical and adoptable in real\nmobile systems that have strict feature requirements on both the software and\nhardware components. TRRIP can reduce the L2 MPKI for instructions by 26.5%\nresulting in geomean speedup of 3.9%, on top of RRIP cache replacement running\nmobile code already optimized using PGO.", "AI": {"tldr": "TRRIP\u662f\u4e00\u79cd\u8f6f\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u901a\u8fc7\u7f16\u8bd1\u5668\u5206\u6790\u4ee3\u7801\u6e29\u5ea6\uff08\u70ed/\u51b7\uff09\u5e76\u6307\u5bfc\u786c\u4ef6\u4f18\u5316\u6307\u4ee4\u7f13\u5b58\u66ff\u6362\u7b56\u7565\uff0c\u5728\u79fb\u52a8CPU\u4e0a\u5b9e\u73b026.5%\u7684L2\u6307\u4ee4MPKI\u964d\u4f4e\u548c3.9%\u7684\u6027\u80fd\u63d0\u5347", "motivation": "\u79fb\u52a8CPU\u8f6f\u4ef6\u590d\u6742\u7684\u8fd0\u884c\u65f6\u884c\u4e3a\u5bfc\u81f4\u6307\u4ee4\u91cd\u7528\u8ddd\u79bb\u589e\u5927\uff0c\u4f20\u7edf\u786c\u4ef6\u4e2d\u5fc3\u7684\u6307\u4ee4\u7f13\u5b58\u7ba1\u7406\u65b9\u6cd5\u4e0d\u8db3\uff0c\u524d\u7aef\u505c\u987f\u4e25\u91cd\u9020\u6210CPU\u8d44\u6e90\u6d6a\u8d39\uff0c\u4ee3\u7801\u590d\u6742\u5ea6\u589e\u957f\u5feb\u4e8e\u7247\u4e0a\u5185\u5b58\u5bb9\u91cf\u589e\u957f", "method": "\u7f16\u8bd1\u5668\u5206\u6790\u4ee3\u7801\u6e29\u5ea6\u5e76\u5206\u7c7b\u8f6c\u6362\uff0c\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u63a5\u53e3\u63d0\u4f9b\u4ee3\u7801\u6e29\u5ea6\u4fe1\u606f\u7ed9\u786c\u4ef6\uff1b\u786c\u4ef6\u8f7b\u91cf\u7ea7\u6269\u5c55\u5229\u7528\u6e29\u5ea6\u5c5e\u6027\u4f18\u5316\u7f13\u5b58\u66ff\u6362\u7b56\u7565\uff0c\u51cf\u5c11\u70ed\u4ee3\u7801\u7684\u9a71\u9010\u7387", "result": "L2\u6307\u4ee4MPKI\u964d\u4f4e26.5%\uff0c\u5728\u5df2\u4f7f\u7528PGO\u4f18\u5316\u7684\u79fb\u52a8\u4ee3\u7801\u57fa\u7840\u4e0a\u5b9e\u73b03.9%\u7684\u51e0\u4f55\u5e73\u5747\u52a0\u901f\u6bd4", "conclusion": "TRRIP\u8f6f\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\u65b9\u6cd5\u80fd\u6709\u6548\u4f18\u5316\u79fb\u52a8\u7cfb\u7edf\u7684\u6307\u4ee4\u7f13\u5b58\u7ba1\u7406\uff0c\u5728\u4e25\u683c\u7684\u529f\u80fd\u8981\u6c42\u4e0b\u5177\u6709\u5b9e\u9645\u90e8\u7f72\u53ef\u884c\u6027"}}
